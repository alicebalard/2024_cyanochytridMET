plot_grid(plotlist = plots, ncol = 3, rel_widths = rep(1, length(plots)))
#wrap_plots(plots, ncol = 4)
dev.off()
ggplot2
?ggplot2
# Remove NULL plots if any
plots <- compact(plots) + theme(panel.clip = "off")
pdf("../../figures/network.pdf", width = 15, height = 20)
plot_grid(plotlist = plots, ncol = 3, rel_widths = rep(1, length(plots)))
#wrap_plots(plots, ncol = 4)
dev.off()
# Generate enhanced network plots per module
plots <- hub_genes %>%
filter(module %in% modules2plot) %>%  # remove or adjust this filter as needed
group_by(module) %>%
group_split() %>%
map(function(df) {
genes <- df$gene
mod <- unique(df$module)
# Subset adjacency matrix to only these genes
valid_genes <- intersect(genes, rownames(adjacency))
if (length(valid_genes) < 2) return(NULL)
adj_sub <- adjacency[valid_genes, valid_genes]
# Build edge list (upper triangle)
edge_df <- as.data.frame(as.table(adj_sub))
colnames(edge_df) <- c("from", "to", "weight")
edge_df <- edge_df %>%
filter(from != to) %>%
filter(as.numeric(factor(from)) < as.numeric(factor(to))) %>%
filter(weight > 0.05)  # adjustable threshold
if (nrow(edge_df) == 0) return(NULL)
# Node metadata: org and kWithin
nodes <- df %>%
filter(gene %in% c(edge_df$from, edge_df$to)) %>%
select(gene, org, kWithin) %>%
distinct() %>%
rename(name = gene)
g <- graph_from_data_frame(edge_df, vertices = nodes, directed = FALSE)
tg <- as_tbl_graph(g)
# Plot using ggraph:
ggraph(tg, layout = "fr") +
geom_edge_link(aes(alpha = weight), color = "black", width = 0.2, show.legend = FALSE) +       # thin black edges
geom_node_label(
aes(label = gsub("GeneID:", "", sub("_.*", "", name)),
color = org,  # text color mapped to org
fill = org), size = 4,
label.r = unit(0.5, "lines"),       # rounded corners = oval feel
label.padding = unit(0.25, "lines"),  # controls horizontal/vertical size
fontface = "bold", label.size = 0
) +
scale_fill_manual(values = c("cyano" = "white", "chytrid" = "black")) +
scale_color_manual(values = c("cyano" = "black", "chytrid" = "white")) +
guides(size = "none") +
theme_void() +
ggtitle(mod) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", colour = mod),
legend.position = "none",
plot.margin = unit(c(2,2,2,2), "cm")  # add margin
)+ theme(panel.clip = "off")
})
# Remove NULL plots if any
plots <- compact(plots)
pdf("../../figures/network.pdf", width = 15, height = 20)
plot_grid(plotlist = plots, ncol = 3, rel_widths = rep(1, length(plots)))
#wrap_plots(plots, ncol = 4)
dev.off()
pdf("../../figures/network.pdf", width = 15, height = 20)
wrap_plots(plots, ncol = 4)
dev.off()
warnings()
# Generate enhanced network plots per module
plots <- hub_genes %>%
filter(module %in% modules2plot) %>%  # remove or adjust this filter as needed
group_by(module) %>%
group_split() %>%
map(function(df) {
genes <- df$gene
mod <- unique(df$module)
# Subset adjacency matrix to only these genes
valid_genes <- intersect(genes, rownames(adjacency))
if (length(valid_genes) < 2) return(NULL)
adj_sub <- adjacency[valid_genes, valid_genes]
# Build edge list (upper triangle)
edge_df <- as.data.frame(as.table(adj_sub))
colnames(edge_df) <- c("from", "to", "weight")
edge_df <- edge_df %>%
filter(from != to) %>%
filter(as.numeric(factor(from)) < as.numeric(factor(to))) %>%
filter(weight > 0.05)  # adjustable threshold
if (nrow(edge_df) == 0) return(NULL)
# Node metadata: org and kWithin
nodes <- df %>%
filter(gene %in% c(edge_df$from, edge_df$to)) %>%
select(gene, org, kWithin) %>%
distinct() %>%
rename(name = gene)
g <- graph_from_data_frame(edge_df, vertices = nodes, directed = FALSE)
tg <- as_tbl_graph(g)
# Plot using ggraph:
ggraph(tg, layout = "fr") +
geom_edge_link(aes(alpha = weight), color = "black", width = 0.2, show.legend = FALSE) +       # thin black edges
geom_node_label(
aes(label = gsub("GeneID:", "", sub("_.*", "", name)),
color = org,  # text color mapped to org
fill = org), size = 4,
label.r = unit(0.5, "lines"),       # rounded corners = oval feel
label.padding = unit(0.25, "lines"),  # controls horizontal/vertical size
fontface = "bold", label.size = 0
) +
scale_fill_manual(values = c("cyano" = "white", "chytrid" = "black")) +
scale_color_manual(values = c("cyano" = "black", "chytrid" = "white")) +
guides(size = "none") +
theme_void() +
ggtitle(mod) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", colour = mod),
legend.position = "none",
plot.margin = unit(c(2,2,2,2), "cm")  # add margin
)+   coord_cartesian(clip = "off")
})
# Remove NULL plots if any
plots <- compact(plots)
pdf("../../figures/network.pdf", width = 15, height = 20)
wrap_plots(plots, ncol = 4)
dev.off()
pdf("../../figures/network.pdf", width = 15, height = 15)
wrap_plots(plots, ncol = 4)
dev.off()
# Generate enhanced network plots per module
plots <- hub_genes %>%
filter(module %in% modules2plot) %>%  # remove or adjust this filter as needed
group_by(module) %>%
group_split() %>%
map(function(df) {
genes <- df$gene
mod <- unique(df$module)
# Subset adjacency matrix to only these genes
valid_genes <- intersect(genes, rownames(adjacency))
if (length(valid_genes) < 2) return(NULL)
adj_sub <- adjacency[valid_genes, valid_genes]
# Build edge list (upper triangle)
edge_df <- as.data.frame(as.table(adj_sub))
colnames(edge_df) <- c("from", "to", "weight")
edge_df <- edge_df %>%
filter(from != to) %>%
filter(as.numeric(factor(from)) < as.numeric(factor(to))) %>%
filter(weight > 0.05)  # adjustable threshold
if (nrow(edge_df) == 0) return(NULL)
# Node metadata: org and kWithin
nodes <- df %>%
filter(gene %in% c(edge_df$from, edge_df$to)) %>%
select(gene, org, kWithin) %>%
distinct() %>%
rename(name = gene)
g <- graph_from_data_frame(edge_df, vertices = nodes, directed = FALSE)
tg <- as_tbl_graph(g)
# Plot using ggraph:
ggraph(tg, layout = "fr") +
geom_edge_link(aes(alpha = weight), color = "black", width = 0.2, show.legend = FALSE) +       # thin black edges
geom_node_label(
aes(label = gsub("GeneID:", "", sub("_.*", "", name)),
color = org,  # text color mapped to org
fill = org), size = 4,
label.r = unit(0.5, "lines"),       # rounded corners = oval feel
label.padding = unit(0.25, "lines"),  # controls horizontal/vertical size
fontface = "bold", label.size = 0
) +
scale_fill_manual(values = c("cyano" = "white", "chytrid" = "black")) +
scale_color_manual(values = c("cyano" = "black", "chytrid" = "white")) +
guides(size = "none") +
theme_void() +
ggtitle(mod) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", colour = mod),
legend.position = "none",
plot.margin = unit(c(1,1,1,1), "cm")  # add margin
)+   coord_cartesian(clip = "off")
})
# Remove NULL plots if any
plots <- compact(plots)
pdf("../../figures/network.pdf", width = 15, height = 15)
wrap_plots(plots, ncol = 4)
dev.off()
pdf("../../figures/network.pdf", width = 10, height = 10)
wrap_plots(plots, ncol = 4)
dev.off()
pdf("../../figures/network.pdf", width = 11, height = 11)
wrap_plots(plots, ncol = 4)
dev.off()
pdf("../../figures/network.pdf", width = 12, height = 12)
wrap_plots(plots, ncol = 4)
dev.off()
pdf("../../figures/network.pdf", width = 10, height = 10)
wrap_plots(plots, ncol = 4)
dev.off()
# Generate enhanced network plots per module
plots <- hub_genes %>%
filter(module %in% modules2plot) %>%  # remove or adjust this filter as needed
group_by(module) %>%
group_split() %>%
map(function(df) {
genes <- df$gene
mod <- unique(df$module)
# Subset adjacency matrix to only these genes
valid_genes <- intersect(genes, rownames(adjacency))
if (length(valid_genes) < 2) return(NULL)
adj_sub <- adjacency[valid_genes, valid_genes]
# Build edge list (upper triangle)
edge_df <- as.data.frame(as.table(adj_sub))
colnames(edge_df) <- c("from", "to", "weight")
edge_df <- edge_df %>%
filter(from != to) %>%
filter(as.numeric(factor(from)) < as.numeric(factor(to))) %>%
filter(weight > 0.05)  # adjustable threshold
if (nrow(edge_df) == 0) return(NULL)
# Node metadata: org and kWithin
nodes <- df %>%
filter(gene %in% c(edge_df$from, edge_df$to)) %>%
select(gene, org, kWithin) %>%
distinct() %>%
rename(name = gene)
g <- graph_from_data_frame(edge_df, vertices = nodes, directed = FALSE)
tg <- as_tbl_graph(g)
# Plot using ggraph:
ggraph(tg, layout = "fr") +
geom_edge_link(aes(alpha = weight), color = "black", width = 0.2, show.legend = FALSE) +       # thin black edges
geom_node_label(
aes(label = gsub("GeneID:", "", sub("_.*", "", name)),
color = org,  # text color mapped to org
fill = org), size = 4,
label.r = unit(0.5, "lines"),       # rounded corners = oval feel
label.padding = unit(0.5, "lines"),  # controls horizontal/vertical size
fontface = "bold", label.size = 0
) +
scale_fill_manual(values = c("cyano" = "white", "chytrid" = "black")) +
scale_color_manual(values = c("cyano" = "black", "chytrid" = "white")) +
guides(size = "none") +
theme_void() +
ggtitle(mod) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", colour = mod),
legend.position = "none",
plot.margin = unit(c(1,1,1,1), "cm")  # add margin
)+   coord_cartesian(clip = "off")
})
# Remove NULL plots if any
plots <- compact(plots)
pdf("../../figures/network.pdf", width = 11, height = 11)
wrap_plots(plots, ncol = 4)
dev.off()
# Generate enhanced network plots per module
plots <- hub_genes %>%
filter(module %in% modules2plot) %>%  # remove or adjust this filter as needed
group_by(module) %>%
group_split() %>%
map(function(df) {
genes <- df$gene
mod <- unique(df$module)
# Subset adjacency matrix to only these genes
valid_genes <- intersect(genes, rownames(adjacency))
if (length(valid_genes) < 2) return(NULL)
adj_sub <- adjacency[valid_genes, valid_genes]
# Build edge list (upper triangle)
edge_df <- as.data.frame(as.table(adj_sub))
colnames(edge_df) <- c("from", "to", "weight")
edge_df <- edge_df %>%
filter(from != to) %>%
filter(as.numeric(factor(from)) < as.numeric(factor(to))) %>%
filter(weight > 0.05)  # adjustable threshold
if (nrow(edge_df) == 0) return(NULL)
# Node metadata: org and kWithin
nodes <- df %>%
filter(gene %in% c(edge_df$from, edge_df$to)) %>%
select(gene, org, kWithin) %>%
distinct() %>%
rename(name = gene)
g <- graph_from_data_frame(edge_df, vertices = nodes, directed = FALSE)
tg <- as_tbl_graph(g)
# Plot using ggraph:
ggraph(tg, layout = "fr") +
geom_edge_link(aes(alpha = weight), color = "black", width = 0.2, show.legend = FALSE) +       # thin black edges
geom_node_label(
aes(label = gsub("GeneID:", "", sub("_.*", "", name)),
color = org,  # text color mapped to org
fill = org), size = 4,
label.r = unit(0.25, "lines"),       # rounded corners = oval feel
label.padding = unit(0.25, "lines"),  # controls horizontal/vertical size
fontface = "bold", label.size = 0
) +
scale_fill_manual(values = c("cyano" = "white", "chytrid" = "black")) +
scale_color_manual(values = c("cyano" = "black", "chytrid" = "white")) +
guides(size = "none") +
theme_void() +
ggtitle(mod) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", colour = mod),
legend.position = "none",
plot.margin = unit(c(1,1,1,1), "cm")  # add margin
)+   coord_cartesian(clip = "off")
})
# Remove NULL plots if any
plots <- compact(plots)
pdf("../../figures/network.pdf", width = 11, height = 11)
wrap_plots(plots, ncol = 4)
dev.off()
# Generate enhanced network plots per module
plots <- hub_genes %>%
filter(module %in% modules2plot) %>%  # remove or adjust this filter as needed
group_by(module) %>%
group_split() %>%
map(function(df) {
genes <- df$gene
mod <- unique(df$module)
# Subset adjacency matrix to only these genes
valid_genes <- intersect(genes, rownames(adjacency))
if (length(valid_genes) < 2) return(NULL)
adj_sub <- adjacency[valid_genes, valid_genes]
# Build edge list (upper triangle)
edge_df <- as.data.frame(as.table(adj_sub))
colnames(edge_df) <- c("from", "to", "weight")
edge_df <- edge_df %>%
filter(from != to) %>%
filter(as.numeric(factor(from)) < as.numeric(factor(to))) %>%
filter(weight > 0.05)  # adjustable threshold
if (nrow(edge_df) == 0) return(NULL)
# Node metadata: org and kWithin
nodes <- df %>%
filter(gene %in% c(edge_df$from, edge_df$to)) %>%
select(gene, org, kWithin) %>%
distinct() %>%
rename(name = gene)
g <- graph_from_data_frame(edge_df, vertices = nodes, directed = FALSE)
tg <- as_tbl_graph(g)
# Plot using ggraph:
ggraph(tg, layout = "fr") +
geom_edge_link(aes(alpha = weight), color = "black", width = 0.2, show.legend = FALSE) +       # thin black edges
geom_node_label(
aes(label = gsub("GeneID:", "", sub("_.*", "", name)),
color = org,  # text color mapped to org
fill = org), size = 4,
label.r = unit(0.2, "lines"),       # rounded corners = oval feel
label.padding = unit(0.25, "lines"),  # controls horizontal/vertical size
fontface = "bold", label.size = 0
) +
scale_fill_manual(values = c("cyano" = "white", "chytrid" = "black")) +
scale_color_manual(values = c("cyano" = "black", "chytrid" = "white")) +
guides(size = "none") +
theme_void() +
ggtitle(mod) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", colour = mod),
legend.position = "none",
plot.margin = unit(c(1,1,1,1), "cm")  # add margin
)+   coord_cartesian(clip = "off")
})
# Remove NULL plots if any
plots <- compact(plots)
pdf("../../figures/network.pdf", width = 12, height = 12)
wrap_plots(plots, ncol = 4)
dev.off()
summary_table <- hub_genes %>%
group_by(module) %>%
summarise(
CyanoGenes = sum(org == "cyano"),
ChytridGenes = sum(org == "chytrid"),
CyanoHubGenes = gene[org == "cyano"],
ChytridHubGenes = gene[org == "chytrid"]) %>%
arrange(desc(CyanoGenes + ChytridGenes))%>% # Order by total genes
filter(CyanoGenes >0 & ChytridGenes > 0)  # rm if only one organism
library(openxlsx)
summary_table <- hub_genes %>%
group_by(module) %>%
summarise(
CyanoGenes = sum(org == "cyano"),
ChytridGenes = sum(org == "chytrid"),
CyanoHubGenes = gene[org == "cyano"],
ChytridHubGenes = gene[org == "chytrid"]) %>%
arrange(desc(CyanoGenes + ChytridGenes))%>% # Order by total genes
filter(CyanoGenes >0 & ChytridGenes > 0)  # rm if only one organism
summary_table <- hub_genes %>%
group_by(module) %>%
summarise(
CyanoGenes = sum(org == "cyano"),
ChytridGenes = sum(org == "chytrid"),
CyanoHubGenes = gsub("GeneID:", "",paste(gene[org == "cyano"], collapse = ", ")),
ChytridHubGenes = paste(sub("_.*", "", gene[org == "chytrid"]), collapse = ", ")
) %>%
arrange(desc(CyanoGenes + ChytridGenes))%>% # Order by total genes
filter(CyanoGenes >0 & ChytridGenes > 0)  # rm if only one organism
summary_table
summary_table <- hub_genes %>%
group_by(module) %>%
summarise(
CyanoGenes = sum(org == "cyano"),
ChytridGenes = sum(org == "chytrid"),
CyanoHubGenes = paste(gene[org == "cyano"], collapse = ", "),
ChytridHubGenes = paste(gene[org == "chytrid"], collapse = ", ")
) %>%
arrange(desc(CyanoGenes + ChytridGenes))%>% # Order by total genes
filter(CyanoGenes >0 & ChytridGenes > 0)  # rm if only one organism
modules2plot <- summary_table$module
# Create a workbook
wb <- createWorkbook()
addWorksheet(wb, "WGCNA Summary")
# Add WGCNA color codes (base R handles them as named colors)
summary_table <- summary_table %>%
mutate(module_color = labels2colors(module))
# Write data (exclude the color column for display)
writeData(wb, sheet = 1, x = summary_table %>% select(-module_color), startCol = 1, startRow = 1)
# Highlight each cell in the module column with its module color
for (i in seq_len(nrow(summary_table))) {
mod_col <- summary_table$module_color[i]
# Set cell style with fill color
style <- createStyle(fgFill = mod_col, fontColour = "#FFFFFF")  # White text
addStyle(wb, sheet = 1, style = style, rows = i + 1, cols = 1, gridExpand = FALSE)
}
# Optional: make headers bold
headerStyle <- createStyle(textDecoration = "bold")
addStyle(wb, sheet = 1, style = headerStyle, rows = 1, cols = 1:5, gridExpand = TRUE)
# Save the Excel file
saveWorkbook(wb, "../../figures/WGCNA_summary_table.xlsx", overwrite = TRUE)
## ===============================
## 🎨 4. Dendrogram & colors
## ===============================
plotDendroAndColors(
net_combined$dendrograms[[1]],
net_combined$colors[net_combined$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
## ===============================
## 🎨 4. Dendrogram & colors
## ===============================
pdf("../../figures/Fig5a.pdf")
plotDendroAndColors(
net_combined$dendrograms[[1]],
net_combined$colors[net_combined$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
dev.off()
## ===============================
## 🎨 4. Dendrogram & colors
## ===============================
pdf("../../figures/Fig5a.pdf", width = 15, height = 10)
plotDendroAndColors(
net_combined$dendrograms[[1]],
net_combined$colors[net_combined$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
dev.off()
## ===============================
## 🎨 4. Dendrogram & colors
## ===============================
pdf("../../figures/Fig5a.pdf", width = 15, height = 8)
plotDendroAndColors(
net_combined$dendrograms[[1]],
net_combined$colors[net_combined$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
dev.off()
## ===============================
## 🎨 4. Dendrogram & colors
## ===============================
pdf("../../figures/Fig5a.pdf", width = 15, height = 5)
plotDendroAndColors(
net_combined$dendrograms[[1]],
net_combined$colors[net_combined$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
dev.off()
ggplot(plot_df, aes(x = Treatment, y = MEgreenyellow, fill = Treatment)) +
geom_boxplot() +
geom_jitter(width = 0.2, size = 2) +
labs(title = "Module Eigengene for MEgreenyellow",
y = "Module Eigengene Value") +
theme_minimal()
pdf("../../figures/Fig5b.pdf", width = 10, height = 10)
ggplot(plot_df, aes(x = Treatment, y = MEgreenyellow, fill = Treatment)) +
geom_boxplot() +
geom_jitter(width = 0.2, size = 2) +
labs(title = "Module Eigengene for MEgreenyellow",
y = "Module Eigengene Value") +
theme_minimal()
dev.off()
pdf("../../figures/Fig5b.pdf", width = 5, height = 5)
ggplot(plot_df, aes(x = Treatment, y = MEgreenyellow, fill = Treatment)) +
geom_boxplot() +
geom_jitter(width = 0.2, size = 2) +
labs(title = "Module Eigengene for MEgreenyellow",
y = "Module Eigengene Value") +
theme_minimal()
dev.off()
ggplot(plot_df, aes(x = Treatment, y = MEgreenyellow, fill = Treatment)) +
geom_boxplot() +
geom_jitter(width = 0.2, size = 2) +
labs(title = "Module Eigengene for MEgreenyellow",
y = "Module Eigengene Value") +
theme_minimal() + theme(legend.position = "none")
pdf("../../figures/Fig5b.pdf", width = 5, height = 5)
ggplot(plot_df, aes(x = Treatment, y = MEgreenyellow, fill = Treatment)) +
geom_boxplot() +
geom_jitter(width = 0.2, size = 2) +
labs(title = "Module Eigengene for MEgreenyellow",
y = "Module Eigengene Value") +
theme_minimal() + theme(legend.position = "none")
dev.off()
pdf("../../figures/Fig5b.pdf", width = 3, height = 3)
ggplot(plot_df, aes(x = Treatment, y = MEgreenyellow, fill = Treatment)) +
geom_boxplot() +
geom_jitter(width = 0.2, size = 2) +
labs(title = "Module Eigengene for MEgreenyellow",
y = "Module Eigengene Value") +
theme_minimal() + theme(legend.position = "none")
dev.off()
pdf("../../figures/Fig5c.network.pdf", width = 12, height = 1)
wrap_plots(plots, ncol = 4)
dev.off()
