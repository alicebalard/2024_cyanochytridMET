ggplot(dam, aes(x = variable, y = value, group = Library, col = Library)) +
geom_line() + theme_bw()
dev.off()
dam <- read.csv("~/Downloads/testDamage.csv")
names(dam) <- c("Library", 1:25)
library(reshape2)
dam <- melt(dam)
ggplot(dam, aes(x = variable, y = value, group = Library, col = Library)) +
geom_line() + theme_bw()
ggplot(dam, aes(x = variable, y = value, group = Library, col = Library)) +
geom_line() + theme_bw() + xlab("position") + ylab("C>T misincorporation at 5' end")
ggplot(dam, aes(x = variable, y = value, group = Library, col = Library)) +
geom_line() + theme_bw() + xlab("position") + ylab("C>T misincorporation frequency")
ggplot(dam, aes(x = variable, y = value, group = Library, col = Library)) +
geom_line() + theme_bw() + xlab("position from 5' end") + ylab("C>T misincorporation frequency")
pdf(file = "~/Downloads/plotDamage.pdf", width = 8, height = 4)
ggplot(dam, aes(x = variable, y = value, group = Library, col = Library)) +
geom_line() + theme_bw() + xlab("position from 5' end") + ylab("C>T misincorporation frequency")
dev.off()
ggplot(dam, aes(x = variable, y = value, group = Library, col = Library)) +
geom_line() + theme_bw() + xlab("position from 5' end") + ylab("C>T misincorporation frequency") +
theme(legend.position = "none")
read.csv("data2025/Alice GCS 7 EA LN.xlsx")
readxl::read_excel("data2025/Alice GCS 7 EA LN.xlsx")
data2025 <- readxl::read_excel("data2025/Alice GCS 7 EA LN.xlsx")
View(data2025)
data2025$GS7_s
data2025$followup
View(data2025)
data2025$type
table(data2025$type)
View(data2025)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, include=FALSE) #cache = TRUE,
# recreateFiles = FALSE # FALSE if we don't have access to the raw files
recreateFiles = TRUE
source("dataPrep.R")
source("dataPrep.R")
recreateFiles = FALSE # FALSE if we don't have access to the raw files
source("dataPrep.R")
recreateFiles = FALSE # FALSE if we don't have access to the raw files
source("dataPrep.R")
install.packages("MuMIn")
R version
version
install.packages("MuMIn")
install.packages("installr")
updateR()
installr::updateR()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, include=FALSE) #cache = TRUE,
data2025_1 <- readxl::read_excel("data2025/Alice GCS 7 EA LN.xlsx")
read.csv("Documents/GIT/2023_cureME_long/data4Ella.csv")
load("prepData.RData")
NEW <- read.csv("Documents/GIT/2023_cureME_long/data4Ella.csv")
NEW$PUIN[!NEW$PUIN %in% ALL$PUIN,]
NEW$PUIN[!NEW$PUIN %in% ALL$PUIN]
data2025_1 <- read.csv("Documents/GIT/2023_cureME_long/data2025/Alice GCS 7 EA LN.xlsx")
data2025_1 <- read.csv("Downloads/Alice GCS 7 EA LN.csv")
data2025_1$PUIN[!data2025_1$PUIN %in% ALL$PUIN]
data2025_1$puin[!data2025_1$puin %in% ALL$PUIN]
data2025_1$puin[data2025_1$puin %in% ALL$PUIN]
length(unique(data2025_1$puin))
length(unique(ALL$PUIN))
unique(ALL$PUIN)[unique(ALL$PUIN) %in% unique(data2025_1$puin)]
unique(ALL$PUIN)[!unique(ALL$PUIN) %in% unique(data2025_1$puin)]
NEW$PUIN[!NEW$PUIN %in% ALL$PUIN]
unique(NEW$PUIN[!NEW$PUIN %in% ALL$PUIN])
write.csv(data.frame(PUIN  = unique(NEW$PUIN[!NEW$PUIN %in% ALL$PUIN])), file = "Downloads/controlsCureME.csv", quote = F, row.names = F)
length(unique(NEW$PUIN[!NEW$PUIN %in% ALL$PUIN]))
load("prepData.RData")
load("prepData.RData")
load("prepData.RData")
data2025_1 <- readxl::read_excel("data2025/Alice GCS 7 EA LN.xlsx")
BiocManager::install("plyranges")
knitr::opts_chunk$set(warning = FALSE, message = FALSE) #cache = TRUE,
recreateFiles=F; source("dataPrep.R")
BW <- read_bigwig("Downloads/GSE186458_RAW/GSM5652176_Adipocytes-Z000000T7.hg38.bigwig")
BiocManager::install("plyranges")
BiocManager::install("plyranges")
library(plyranges)
BW <- read_bigwig("Downloads/GSE186458_RAW/GSM5652176_Adipocytes-Z000000T7.hg38.bigwig")
BW$score
head(BS)
head(BW)
8/12
3/9
seqnames(BW)
seqnames(BW)[[1]]
seqnames(BW)[1]
BW@seqnames
paste0(BW@seqnames, BW@ranges)
paste0(head(BW@seqnames), head(BW@ranges))
paste0(head(BW@seqnames), head(BW@ranges), sep = "_")
paste(head(BW@seqnames), head(BW@ranges), sep = "_")
head(BW)
paste(head(BW@seqnames), head(BW@ranges), sep = "_")
write.csv(x = paste(head(BW@seqnames), head(BW@ranges), sep = "_"), file = "Downloads/hg38CpGpos", quote = F, row.names = F)
write.csv(x = paste(head(BW@seqnames), head(BW@ranges), sep = "_"), file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
write.csv(x = CpGpos = paste(head(BW@seqnames), head(BW@ranges), sep = "_"), file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
write.csv(x = data.frame(CpGpos = paste(head(BW@seqnames), head(BW@ranges), sep = "_")),
file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
write.csv(x = vector(CpGpos = paste(head(BW@seqnames), head(BW@ranges), sep = "_")),
file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
CpGpos = paste(head(BW@seqnames), head(BW@ranges), sep = "_")
write.csv(x =CpGpos,
file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
write.table(x=CpGpos,
file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
CpGpos=paste(head(BW@seqnames), head(BW@ranges), sep = "_")
CpGpos
paste(head(BW@seqnames), head(BW@ranges), sep = "_")
CpGpos=paste(head(BW@seqnames), head(BW@ranges), sep = "_")
write.table(x=CpGpos,
file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
#BiocManager::install("plyranges")
library(plyranges)
BW <- read_bigwig("Downloads/GSE186458_RAW/GSM5652176_Adipocytes-Z000000T7.hg38.bigwig")
CpGpos=paste(BW@seqnames, BW@ranges, sep = "_")
write.table(x=CpGpos,
file = "Downloads/hg38CpGpos", quote = F, row.names = F, col.names = F)
# Load necessary libraries
## Results of previous analysis
setwd("../Part2_DEG/")
setwd("Documents/GIT/2024_cyanochytridMET/scripts/Part2_DEG/")
# Load necessary libraries
## Results of previous analysis
setwd("../Part2_DEG/")
source("fullAnalysis.R")
setwd("../Part3_WGCNA/")
## ============================================================
## ðŸ“¦ 1. Load Variance-stabilized matrices from previous script
## ============================================================
vst_cyano <- contrast_cyanogenome$vstr
vst_chy <- contrast_chytridgenome$vstr
vst_chy %>% nrow # 835 genes
vst_cyano %>% nrow # 555 genes
## For big data
options(stringsAsFactors = FALSE)
allowWGCNAThreads()
##############################################
## I. Single species co-expression analysis ##
##############################################
## ===============================
## âœ… 2.Pick soft power threshold
## ===============================
# The soft threshold (Î²) is a key parameter in WGCNA.
# It raises the correlation matrix to this power to emphasize strong correlations
# and suppress weak ones, so your network approximates a scale-free topology â€”
# the biological reality that a few genes are highly connected (hubs) while most arenâ€™t.
# Scale-free topology fit index (SFT.R.sq): Good â‰¥ 0.8 (â‰¥0.9 better); bad <0.6
# Mean connectivity between 5 and 100 is usually reasonable to not lose meaningful connections.
pickSoftPow <- function(vst){
par(mfrow = c(2, 1))
sth <- pickSoftThreshold(t(vst), powerVector = c(1:20), verbose = 5)
plot(sth$fitIndices$Power, sth$fitIndices$SFT.R.sq, type="b",
xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2",
main="Scale-Free Topology Fit")
abline(h=0.8, col="red", lty=2); abline(h=0.9, col="red", lty=1)
plot(sth$fitIndices$Power, sth$fitIndices$mean.k., type="b",
xlab="Soft Threshold (power)", ylab="Mean connectivity",
main="Scale-Free Topology Fit")
abline(h=5, col="red", lty=2)
par(mfrow = c(1, ))
}
pickSoftPow(vst_chy)
wrap_plots(plots, ncol = 4)
setwd("../Part3_WGCNA/")
## ============================================================
## ðŸ“¦ 1. Load Variance-stabilized matrices from previous script
## ============================================================
vst_cyano <- contrast_cyanogenome$vstr
vst_chy <- contrast_chytridgenome$vstr
vst_chy %>% nrow # 835 genes
vst_cyano %>% nrow # 555 genes
## For big data
options(stringsAsFactors = FALSE)
allowWGCNAThreads()
pickSoftPow <- function(vst){
par(mfrow = c(2, 1))
sth <- pickSoftThreshold(t(vst), powerVector = c(1:20), verbose = 5)
plot(sth$fitIndices$Power, sth$fitIndices$SFT.R.sq, type="b",
xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2",
main="Scale-Free Topology Fit")
abline(h=0.8, col="red", lty=2); abline(h=0.9, col="red", lty=1)
plot(sth$fitIndices$Power, sth$fitIndices$mean.k., type="b",
xlab="Soft Threshold (power)", ylab="Mean connectivity",
main="Scale-Free Topology Fit")
abline(h=5, col="red", lty=2)
par(mfrow = c(1, ))
}
pickSoftPow(vst_chy)
## ===============================
## ðŸ”— 3. Build modules
## ===============================
cor <- WGCNA::cor
net_chy <- blockwiseModules(
datExpr = t(vst_chy),
power = 8,
TOMType = "signed", minModuleSize = 30, reassignThreshold = 0,
mergeCutHeight = 0.25, saveTOMs = TRUE, saveTOMFileBase = "chyTOM",
verbose = 3)
# Number of modules identified:
table(net_chy$colors)
# Change grey to NA to rm unassigned geneds
net_chy$colors[net_chy$colors == "grey"] <- "white"
net_cyano <- blockwiseModules(
datExpr = t(vst_cyano),
power = 12,
TOMType = "signed", minModuleSize = 30, reassignThreshold = 0,
mergeCutHeight = 0.25, saveTOMs = TRUE, saveTOMFileBase = "cyanoTOM",
verbose = 3)
# Number of modules identified:
table(net_cyano$colors)
# Change grey to NA
net_cyano$colors[net_cyano$colors == "grey"] <- "white"
## ===============================
## ðŸŽ¨ 4. Dendrogram & colors
## ===============================
plotDendroAndColors(
net_chy$dendrograms[[1]],
net_chy$colors[net_chy$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
plotDendroAndColors(
net_cyano$dendrograms[[1]],
net_cyano$colors[net_cyano$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
## ==============================
## 5. Run enrichment on modules
## ==============================
res <- lapply(names(table(net_chy$colors)), function(i){
getGOBubbleZ(universe = colnames(t(vst_chy)),
annotation = annotationChytrid,
genelist = names(net_chy$colors)[net_chy$colors == i],
GO_df = GO_chytrid, isbubble = F)
})
res <- lapply(names(table(net_cyano$colors)), function(i){
getGOBubbleZ(universe = colnames(t(vst_cyano)),
annotation = annotationCyano,
genelist = names(net_cyano$colors)[net_cyano$colors == i],
GO_df = GO_cyano, isbubble = F)
})
## =================
## 6. Find our DEG
## =================
table(na.omit(net_chy$colors[unique(fullDEGTable$geneName)]))
data.frame(modules=na.omit(net_chy$colors[unique(fullDEGTable$geneName)])) %>%
arrange(modules) ## white = no module
table(na.omit(net_cyano$colors[unique(fullDEGTable$geneName)]))
data.frame(modules=na.omit(net_cyano$colors[unique(fullDEGTable$geneName)])) %>%
arrange(modules) ## white = no module
treatment <- ifelse(grepl("^control", colnames(vst_chy)), 0, 1)
moduleTraitCor = cor(net_chy$MEs, treatment, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, length(treatment))
moduleTraitCor; moduleTraitPvalue
labeledHeatmap(Matrix = moduleTraitCor, xLabels = "Treatment",
yLabels = names(net_chy$MEs), colors = blueWhiteRed(50))
treatment <- ifelse(grepl("chy", colnames(vst_chy)), 0, 1)
moduleTraitCor <- cor(net_chy$MEs, treatment, use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, length(treatment))
moduleTraitCor; moduleTraitPvalue
labeledHeatmap(Matrix = moduleTraitCor, xLabels = "Treatment",
yLabels = names(net_chy$MEs), colors = blueWhiteRed(50))
vst_chy_both <- vst_chy[, shared_samples]
# Make sure samples are in same order:
vst_cyano_both <- vst_cyano_both[, colnames(vst_chy_both)]
stopifnot(all(colnames(vst_cyano_both) == colnames(vst_chy_both)))
## combined
vst_combined <- rbind(vst_chy_both, vst_cyano_both)
## ===============================
## âœ… 2.Pick soft power threshold
## ===============================
pickSoftPow(vst_combined)
softPower_combined <- 1 # to avoid too high connectivity
## ===============================
## ðŸ”— 3. Build modules
## ===============================
cor <- WGCNA::cor
net_combined <- blockwiseModules(
datExpr = t(vst_combined),
power = softPower_combined,
corFnc = "bicor",
networkType = "signed",
TOMType = "signed",
minModuleSize = 30,
mergeCutHeight = 0.25,
reassignThreshold = 0,
verbose = 5
)
# Number of modules identified:
table(net_combined$colors)
## ===============================
## ðŸŽ¨ 4. Dendrogram & colors
## ===============================
pdf("../../figures/Fig5a.pdf", width = 15, height = 5)
plotDendroAndColors(
net_combined$dendrograms[[1]],
net_combined$colors[net_combined$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
dev.off()
## ==============================
## 5. Run enrichment on modules
## ==============================
res <- lapply(names(table(net_combined$colors)), function(i){
getGOBubbleZ(universe = colnames(t(vst_combined)),
annotation = rbind(annotationChytrid[
names(annotationChytrid) %in%
c("custom_gene_name", "gene_name", "GO.accession")],
annotationCyano),
genelist = names(net_combined$colors)[net_combined$colors == i],
GO_df = rbind(GO_chytrid,GO_cyano), isbubble = F)
})
## =================
## 6. Find our DEG
## =================
table(na.omit(net_combined$colors[unique(fullDEGTable$geneName)]))
data.frame(modules=na.omit(net_combined$colors[unique(fullDEGTable$geneName)])) %>%
arrange(modules)
treatment <- ifelse(grepl("^control", colnames(vst_combined)), 0, 1)
moduleTraitCor = cor(net_combined$MEs, treatment,use = "p")
net_combined <- blockwiseModules(
datExpr = t(vst_combined),
power = softPower_combined,
corFnc = "bicor",
networkType = "signed",
TOMType = "signed",
minModuleSize = 30,
mergeCutHeight = 0.25,
reassignThreshold = 0,
verbose = 5
)
#####################################
## II. Dual co-expression analysis ##
#####################################
# We keep only "both" (dual transcriptome)
# vst_cyano: genes x samples
# vst_chy: genes x samples
shared_samples <- intersect(colnames(vst_cyano), colnames(vst_chy))
# Keep same sample order
vst_cyano_both <- vst_cyano[, shared_samples]
vst_chy_both <- vst_chy[, shared_samples]
# Make sure samples are in same order:
vst_cyano_both <- vst_cyano_both[, colnames(vst_chy_both)]
stopifnot(all(colnames(vst_cyano_both) == colnames(vst_chy_both)))
## combined
vst_combined <- rbind(vst_chy_both, vst_cyano_both)
## ===============================
## âœ… 2.Pick soft power threshold
## ===============================
pickSoftPow(vst_combined)
softPower_combined <- 1 # to avoid too high connectivity
## ===============================
## ðŸ”— 3. Build modules
## ===============================
cor <- WGCNA::cor
net_combined <- blockwiseModules(
datExpr = t(vst_combined),
power = softPower_combined,
corFnc = "bicor",
networkType = "signed",
TOMType = "signed",
minModuleSize = 30,
mergeCutHeight = 0.25,
reassignThreshold = 0,
verbose = 5
)
# Number of modules identified:
table(net_combined$colors)
## ===============================
## ðŸŽ¨ 4. Dendrogram & colors
## ===============================
pdf("../../figures/Fig5a.pdf", width = 15, height = 5)
plotDendroAndColors(
net_combined$dendrograms[[1]],
net_combined$colors[net_combined$blockGenes[[1]]], "Module colors",
dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
dev.off()
## ==============================
## 5. Run enrichment on modules
## ==============================
res <- lapply(names(table(net_combined$colors)), function(i){
getGOBubbleZ(universe = colnames(t(vst_combined)),
annotation = rbind(annotationChytrid[
names(annotationChytrid) %in%
c("custom_gene_name", "gene_name", "GO.accession")],
annotationCyano),
genelist = names(net_combined$colors)[net_combined$colors == i],
GO_df = rbind(GO_chytrid,GO_cyano), isbubble = F)
})
## =================
## 6. Find our DEG
## =================
table(na.omit(net_combined$colors[unique(fullDEGTable$geneName)]))
data.frame(modules=na.omit(net_combined$colors[unique(fullDEGTable$geneName)])) %>%
arrange(modules)
treatment <- ifelse(grepl("^control", colnames(vst_combined)), 0, 1)
moduleTraitCor = cor(net_combined$MEs, treatment,use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, length(treatment))
moduleTraitCor; moduleTraitPvalue
# If you plot eigengene boxplots for these 3, youâ€™ll see how they change by treatment.
meta <- data.frame(
Sample = rownames(net_combined$MEs),
Treatment = sub("_.*", "",  rownames(net_combined$MEs)),
stringsAsFactors = TRUE)
plot_df <- net_combined$MEs %>%
as.data.frame() %>%
mutate(Sample = rownames(.)) %>%
left_join(meta, by = "Sample")
pdf("../../figures/Fig5b.pdf", width = 3, height = 3)
ggplot(plot_df, aes(x = Treatment, y = MEgreenyellow, fill = Treatment)) +
geom_boxplot() +
geom_jitter(width = 0.2, size = 2) +
labs(title = "Module Eigengene for MEgreenyellow",
y = "Module Eigengene Value") +
theme_minimal() + theme(legend.position = "none")
dev.off()
# ## as well as the hub genes (core genes for a module). We could focus only on modules
# (groups of super co-expressed genes) that have a lot of host AND parasite genes together,
# or plotting all. I'll prepare a plot with all and we can discuss to focus on the most interesting.
# I'll try to find time to do that ASAP.
#
## âœ… (1) Find the ratio of both species per module
# Get gene names
chy_genes <- row.names(vst_chy)
cyano_genes <- row.names(vst_cyano)
# Combine into a data.frame: gene + species + module
gene_species_df <- data.frame(
gene = names(net_combined$colors),
module = net_combined$colors,
species = ifelse(names(net_combined$colors) %in% chy_genes, "Chytrid",
ifelse(names(net_combined$colors) %in% cyano_genes, "Cyano", NA))
)
# Count table
table_per_module <- table(gene_species_df$module, gene_species_df$species)
print(table_per_module)
# Proportions per module
prop_table <- prop.table(table_per_module, margin = 1)
print(round(prop_table, 2))
# Calculate adjacency
adjacency <- adjacency(t(vst_combined), power = softPower_combined)
# Calculate intramodular connectivity (kWithin)
IMconn <- intramodularConnectivity(adjacency, net_combined$colors)
# Add module membership too:
ME <- moduleEigengenes(t(vst_combined), net_combined$colors)$eigengenes
kME <- signedKME(t(vst_combined), ME)
# Combine results
hub_df <- data.frame(
gene = rownames(vst_combined),
module = net_combined$colors,
kWithin = IMconn$kWithin,
kME = apply(kME, 1, max)
)
# Get top 10% per module by kWithin:
hub_genes <- hub_df %>%
group_by(module) %>%
slice_max(order_by = kWithin, prop = 0.1)
# Add a column for organism type (host vs. parasite)
hub_genes <- hub_genes %>%
mutate(org = ifelse(gene %in% annotationChytrid$gene_name, "chytrid",
ifelse(gene %in% annotationCyano$gene_name, "cyano", NA)))
install.packages("openxlsx")
install.packages("openxlsx")
# Add a column for organism type (host vs. parasite)
hub_genes <- hub_genes %>%
mutate(org = ifelse(gene %in% annotationChytrid$gene_name, "chytrid",
ifelse(gene %in% annotationCyano$gene_name, "cyano", NA)))
# Combine results
hub_df <- data.frame(
gene = rownames(vst_combined),
module = net_combined$colors,
kWithin = IMconn$kWithin,
kME = apply(kME, 1, max)
)
# Get top 10% per module by kWithin:
hub_genes <- hub_df %>%
group_by(module) %>%
slice_max(order_by = kWithin, prop = 0.1)
# Add a column for organism type (host vs. parasite)
hub_genes <- hub_genes %>%
mutate(org = ifelse(gene %in% annotationChytrid$gene_name, "chytrid",
ifelse(gene %in% annotationCyano$gene_name, "cyano", NA)))
## Which hub genes are also DEG?
hub_genes
## Which hub genes are also DEG?
hub_genes$gene
fullDEGTable$geneName
## Which hub genes are also DEG?
intersect(hub_genes$gene, fullDEGTable$geneName)
hub_genes$gene
"HDA1A_XENLA" %in% hub_genes$gene
hub_genes %>%
group_by(module) %>%
summarise(
CyanoGenes = sum(org == "cyano"),
ChytridGenes = sum(org == "chytrid"),
CyanoHubGenes = paste(gene[org == "cyano"], collapse = ", "),
ChytridHubGenes = paste(gene[org == "chytrid"], collapse = ", ")
) %>%
arrange(desc(CyanoGenes + ChytridGenes))
"HDA1A_XENLA" %in% hub_genes$gene
grep("HDA1A_XENLA", hub_genes$gene)
hub_genes[grep("HDA1A_XENLA", hub_genes$gene),]
hub_genes[grep("RS15A_BOVIN", hub_genes$gene),]
hub_genes[grep("RS15A_BOVIN", hub_genes$gene),"module"]
hub_genes[hub_genes$module %in% hub_genes[grep("RS15A_BOVIN", hub_genes$gene),"module"],]
hub_genes[hub_genes$module %in% hub_genes[grep("HDA1A_XENLA", hub_genes$gene),"module"],]
hub_genes[hub_genes$module %in% hub_genes[grep("GeneID:77286325", hub_genes$gene),"module"],]
hub_genes[hub_genes$module %in% hub_genes[grep("HDA1A_XENLA", hub_genes$gene),"module"],]
hub_genes[hub_genes$module %in% hub_genes[grep("RS15A_BOVIN", hub_genes$gene),"module"],]
## Which hub genes are also DEG?
intersect(hub_genes$gene, fullDEGTable$geneName)
hub_genes[hub_genes$module %in% hub_genes[grep("GeneID:77286325", hub_genes$gene),"module"],]
hub_genes[hub_genes$module %in% hub_genes[grep("HDA1A_XENLA", hub_genes$gene),"module"],]
hub_genes[hub_genes$module %in% hub_genes[grep("RS15A_BOVIN", hub_genes$gene),"module"],]
