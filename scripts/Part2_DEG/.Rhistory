main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
## Genes in the module:
colnames(datExpr)[moduleColors=="turquoise"]
# DEGs within associated modules are likely important for the condition-specific responses: None
colnames(datExpr)[moduleColors=="turquoise"] %in% fullDEGTable[grep("Infection effect", fullDEGTable$comparison),"geneName"]
## GO on these
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = colnames(datExpr)[moduleColors=="turquoise"],
GO_df = GO_chytrid, isbubble = F)
datExpr = t(contrast_cyanogenome$vstr)
## load species specific consMEs, moduleLabels, moduleColors, consTree
load("../../data/Network_cyano.RData")
# Get data traits
datTraits0 <- data.frame(sample_id = rownames(datExpr))
# Split the sample_id column into three new columns
datTraits <- data.frame(do.call(rbind, strsplit(as.character(datTraits0$sample_id), "_")))
# Rename the columns for clarity
colnames(datTraits) <- c("MetTrt", "InfTrt", "ID")
datTraits = datTraits[-3]
# Combine the original data with the split data
rownames(datTraits)=datTraits0$sample_id
datTraits$MetTrt <- as.numeric(as.factor(datTraits$MetTrt))
datTraits$InfTrt <- as.numeric(as.factor(datTraits$InfTrt))
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# Define variable weight containing the InfTrt column of datTrait
InfTrt = as.data.frame(datTraits$InfTrt);
findSoftPower(exprData = t(contrast_cyanogenome$vstr))
makeNetwork(exprData = t(contrast_cyanogenome$vstr), mypower = 18,
fileNamePlot = "../../data/ConsensusDendrogram-cyano.pdf",
fileNameNet = "../../data/Network_cyano.RData")
datExpr = t(contrast_cyanogenome$vstr)
## load species specific consMEs, moduleLabels, moduleColors, consTree
load("../../data/Network_cyano.RData")
# Get data traits
datTraits0 <- data.frame(sample_id = rownames(datExpr))
# Split the sample_id column into three new columns
datTraits <- data.frame(do.call(rbind, strsplit(as.character(datTraits0$sample_id), "_")))
# Rename the columns for clarity
colnames(datTraits) <- c("MetTrt", "InfTrt", "ID")
datTraits = datTraits[-3]
# Combine the original data with the split data
rownames(datTraits)=datTraits0$sample_id
datTraits$MetTrt <- as.numeric(as.factor(datTraits$MetTrt))
datTraits$InfTrt <- as.numeric(as.factor(datTraits$InfTrt))
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
makeNetwork(exprData = t(contrast_cyanogenome$vstr), mypower = 16,
fileNamePlot = "../../data/ConsensusDendrogram-cyano.pdf",
fileNameNet = "../../data/Network_cyano.RData")
## Are DEG all in one module?
fullDEGTable$comparison
## Are DEG all in one module?
grep("on chytrid gene expression", fullDEGTable$comparison)
## Are DEG all in one module?
fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison),]
## Are DEG all in one module?
fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]
colnames(datExpr)[moduleColors=="turquoise"]
## Quantifying moduleâ€“trait associations
# Define numbers of genes and samples
datExpr = t(contrast_chytridgenome$vstr)
## load species specific consMEs, moduleLabels, moduleColors, consTree
load("../../data/Network_chytrid.RData")
# Get data traits
datTraits0 <- data.frame(sample_id = rownames(datExpr))
# Split the sample_id column into three new columns
datTraits <- data.frame(do.call(rbind, strsplit(as.character(datTraits0$sample_id), "_")))
# Rename the columns for clarity
colnames(datTraits) <- c("MetTrt", "InfTrt", "ID")
datTraits = datTraits[-3]
# Combine the original data with the split data
rownames(datTraits)=datTraits0$sample_id
datTraits$MetTrt <- as.numeric(as.factor(datTraits$MetTrt))
datTraits$InfTrt <- as.numeric(as.factor(datTraits$InfTrt))
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# Figure: Module-trait associations. Each row corresponds to a module eigengene, column to a trait. Each cell
# contains the corresponding correlation and p-value. The table is color-coded by correlation according to the color
# legend.
# Define variable weight containing the InfTrt column of datTrait
InfTrt = as.data.frame(datTraits$InfTrt);
names(InfTrt) = "InfTrt"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, InfTrt, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(InfTrt), sep="");
names(GSPvalue) = paste("p.GS.", names(InfTrt), sep="");
## Chytrid: MEturquoise correlate with infection status (cor = 0.46, p = 0.05)
#############################################################################################
# Intramodular analysis: identifying genes with high Gene Significance and Module Membership
module = "turquoise"
column = match(module, modNames);
moduleGenes = moduleColors==module;
sizeGrWindow(7, 7);
par(mfrow = c(1,1));
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for InfTrt",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
# Figure: A scatterplot of Gene Significance (GS) for weight vs. Module Membership (MM) in the module.
# There is a significant correlation between GS and MM in this module.
## Genes in the module:
colnames(datExpr)[moduleColors=="turquoise"]
# DEGs within associated modules are likely important for the condition-specific responses: None
colnames(datExpr)[moduleColors=="turquoise"] %in% fullDEGTable[grep("Infection effect", fullDEGTable$comparison),"geneName"]
colnames(datExpr)
moduleColors
moduleGenes
geneModuleMembership
head(geneModuleMembership)
modNames
MMPvalue
head(MMPvalue)
## Are DEG all in one module?
fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]
## Are DEG all in one module?
rownames(MMPvaluefullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"])
## Are DEG all in one module?
rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]
## Are DEG all in one module?
MMPvalue[rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]
MMPvalue < 0.05
## Are DEG all in one module?
MMPvalue[rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]< 0.05
## In which modules are DEG?
MMPvalue[rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]< 0.05
## In which modules are DEG?
MMPvalue[rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]< 0.05 %>%
dplyr::filter(rowSums>0)
## In which modules are DEG?
MMPvalue[rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]< 0.05 %>%
data.frame()
## In which modules are DEG?
MMPvalue[rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]< 0.05 %>%
as.data.frame()
## In which modules are DEG?
x = MMPvalue[rownames(MMPvalue) %in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]< 0.05
rowSums(x)
rowSums(x)>0
x[rowSums(x)>0,]
geneModuleMembership
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
textMatrix
moduleTraitCor
datTraits
moduleColors
moduleLabels
table(CICA_EMENI)
table(moduleLabels
)
moduleColors
consMEs
## In which modules are DEG?
moduleLabels
## In which modules are DEG?
data.frame(moduleLabels, moduleColors)
moduleLabels
rownames(moduleLabels)
names(moduleLabels)
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]
moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]
moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]]
x = moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]]
x > 0
x[x > 0]
datExpr = t(contrast_cyanogenome$vstr)
contrast_chytridgenome$vstr
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH")]
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),]
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
pivot_longer()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_wider()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_wider(name = "name")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)%>%
ggplot()
df_long <- contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
colnames(df_long)[1] <- "genes"
df_long
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes") %>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes") %>%
pivot_longer(
cols = everything(-genes),
names_to = "sample"
values_to = "value"
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes") %>%
pivot_longer(
cols = everything(-genes),
names_to = "sample",
values_to = "value"
)
# Define the matrix
matrix_data <- matrix(
c(6.298574, 9.36423, 10.083060, 7.092527, 6.463589, 6.362593, 4.870600,
7.090636, 11.33752, 7.458241, 6.074389, 7.487103, 8.404041, 5.785601),
nrow = 2,
dimnames = list(c("ILVB_CRYNH", "RS15A_BOVIN"),
c("control_both_In2", "control_both_In3", "control_both_In5",
"control_chy_Z1", "control_chy_Z2", "control_chy_Z3", "control_chy_Z4"))
)
# Convert matrix to dataframe and preserve rownames as "genes"
df <- as.data.frame(matrix_data) %>%
rownames_to_column("genes")
# Use pivot_longer to reshape the dataframe
df_long <- df %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
)
# View the resulting dataframe
print(df_long)
df
as.data.frame(matrix_data)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes")%>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
)
as.data.frame(matrix_data) %>%
rownames_to_column("genes")
as.data.frame(matrix_data) %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
as.data.frame(matrix_data) %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
)
as.data.frame(matrix_data) %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
) %>% ggplot(aes(x=ILVB_CRYNH, y=RS15A_BOVIN))
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
) %>% ggplot(aes(x=ILVB_CRYNH, y=RS15A_BOVIN)) + geom_point()
datExpr = t(contrast_cyanogenome$vstr)
## load species specific consMEs, moduleLabels, moduleColors, consTree
load("../../data/Network_cyano.RData")
# Get data traits
datTraits0 <- data.frame(sample_id = rownames(datExpr))
# Split the sample_id column into three new columns
datTraits <- data.frame(do.call(rbind, strsplit(as.character(datTraits0$sample_id), "_")))
# Rename the columns for clarity
colnames(datTraits) <- c("MetTrt", "InfTrt", "ID")
datTraits = datTraits[-3]
# Combine the original data with the split data
rownames(datTraits)=datTraits0$sample_id
datTraits$MetTrt <- as.numeric(as.factor(datTraits$MetTrt))
datTraits$InfTrt <- as.numeric(as.factor(datTraits$InfTrt))
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# Define variable weight containing the InfTrt column of datTrait
InfTrt = as.data.frame(datTraits$InfTrt);
names(InfTrt) = "InfTrt"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, InfTrt, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(InfTrt), sep="");
names(GSPvalue) = paste("p.GS.", names(InfTrt), sep="");
module = "turquoise"
column = match(module, modNames);
moduleGenes = moduleColors==module;
sizeGrWindow(7, 7);
par(mfrow = c(1,1));
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for InfTrt",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
## GO on these: nothing
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = colnames(datExpr)[moduleColors=="turquoise"],
GO_df = GO_chytrid, isbubble = F)
#############################################################################################
## In which modules are DEG?
data.frame(moduleLabels, moduleColors) # 1 is turquoise, 2 blue
#############################################################################################
## In which modules are DEG?
table(moduleColors)
data.frame(moduleLabels, moduleColors) # 1 is turquoise, 2 blue, 3 brown
x = moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on cyano gene expression", fullDEGTable$comparison), "geneName"]]
x
x = moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on cyanobacteria gene expression", fullDEGTable$comparison), "geneName"]]
x[x > 0]
