resr_inf_effect_control
res = resr_inf_effect_control
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
# results_df$Ensembl_id = row.names(results_df)
results_df = results_df[order(results_df$padj),]
# results_genes = gconvert(row.names(res), organism = "mmusculus",
# target = "ENTREZGENE_ACC", filter_na = FALSE)
# add the gene names
# results_df = merge(results_df,
#                    results_genes[,c("input", "target", "name", "description")],
#                    by.x = "Ensembl_id", by.y = "input")
# results_df$Name <- ifelse(is.na(results_df$name), results_df$Ensembl_id, results_df$name)
# Subset the results to keep only significant genes
results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
dev.new(width = 15, height = 12)
EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange',
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
tail(rownames(resr_inf_effect_control))
EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = "title", subtitle = "sub",
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
## Volcano plot
dev.new(width = 15, height = 12)
EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = "title", subtitle = "sub",
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = "infected vs not infected, MET unexposed", subtitle = "cyanobacteria genes",
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
plot = EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
title = "infected vs not infected, MET unexposed"
subtitle = "P. agardhii genes"
plot = EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
rm(title, subtitle)
rm(res)
rm(plot)
rm(results_df)
makeVolcano <- function(res, title, subtitle){
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
# results_df$Ensembl_id = row.names(results_df)
results_df = results_df[order(results_df$padj),]
# results_genes = gconvert(row.names(res), organism = "mmusculus",
# target = "ENTREZGENE_ACC", filter_na = FALSE)
# add the gene names
# results_df = merge(results_df,
#                    results_genes[,c("input", "target", "name", "description")],
#                    by.x = "Ensembl_id", by.y = "input")
# results_df$Name <- ifelse(is.na(results_df$name), results_df$Ensembl_id, results_df$name)
# Subset the results to keep only significant genes
results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
return(list(signifGenes = , plot = plot))
}
makeVolcano(res = resr_inf_effect_control,
title = "infected vs not infected, MET unexposed",
subtitle = "P. agardhii genes")
makeVolcano <- function(res, title, subtitle){
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
# results_df$Ensembl_id = row.names(results_df)
results_df = results_df[order(results_df$padj),]
# results_genes = gconvert(row.names(res), organism = "mmusculus",
# target = "ENTREZGENE_ACC", filter_na = FALSE)
# add the gene names
# results_df = merge(results_df,
#                    results_genes[,c("input", "target", "name", "description")],
#                    by.x = "Ensembl_id", by.y = "input")
# results_df$Name <- ifelse(is.na(results_df$name), results_df$Ensembl_id, results_df$name)
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
return(list(signifGenes = ressig, plot = plot))
}
makeVolcano(res = resr_inf_effect_control,
title = "infected vs not infected, MET unexposed",
subtitle = "P. agardhii genes")
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs not infected, MET unexposed",
subtitle = "P. agardhii genes")
V_inf_effect_control$plot
subtitle = past0(expression(italic(P. agardhii), " genes"))
subtitle = paste0(expression(italic("P. agardhii"), " genes"))
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs not infected, MET unexposed",
subtitle = paste0(expression(italic("P. agardhii"), " genes")))
V_inf_effect_control$plot
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs not infected, MET unexposed",
subtitle = expression(italic("P. agardhii")))
## open bigger window
dev.new(width = 15, height = 12)
V_inf_effect_control$plot
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii",
subtitle = "MET unexposed")
V_inf_effect_control$plot
grep("gene", resr_inf_effect_control)
grep("gene", names(resr_inf_effect_control))
names(resr_inf_effect_control)
grep("gene", rownames(resr_inf_effect_control))
table(grep("gene", rownames(resr_inf_effect_control)))
sum(grep("gene", rownames(resr_inf_effect_control)))
length(rownames(resr_inf_effect_control))
grep("gene", rownames(resr_inf_effect_control))
grepl("gene", rownames(resr_inf_effect_control))
sum(grepl("gene", rownames(resr_inf_effect_control)))
length(rownames(resr_inf_effect_control))
## 1) new_gene_trans_map_fungi.txt - this file contains the gene number and its name without any additional information (e.g. gene 1 TRINITY_DN43456_c0_g1_i1).
read.table("../../data/new_gene_trans_map_fungi.txt")
## 1) new_gene_trans_map_fungi.txt - this file contains the gene number and its name without any additional information (e.g. gene 1 TRINITY_DN43456_c0_g1_i1).
new_gene_trans_map_fungi <- read.table("../../data/new_gene_trans_map_fungi.txt")
## Read in DESeq2 results:
## chytrids in the control infecting cyanobacteria vs not infecting (zoospores)
resr_inf_effect_control <- readRDS("../../data/resr_inf_effect_control.rds")
new_gene_trans_map_fungi
resr_inf_effect_control
new_gene_trans_map_fungi$V1
new_gene_trans_map_fungi$V1
new_gene_trans_map_fungi$V2
rownames(resr_inf_effect_control)
new_gene_trans_map_fungi$V2
match(rownames(resr_inf_effect_control), new_gene_trans_map_fungi$V1)
new_gene_trans_map_fungi$V2[
match(rownames(resr_inf_effect_control), new_gene_trans_map_fungi$V1)]
head(rownames(resr_inf_effect_control))
head(new_gene_trans_map_fungi$V1)
head(new_gene_trans_map_fungi$V2)
head(new_gene_trans_map_fungi$V2,10)
resr_inf_effect_control$geneName <- new_gene_trans_map_fungi$V2[
match(rownames(resr_inf_effect_control), new_gene_trans_map_fungi$V1)]
## Add annotation
annotChyt <- read.table("../../data/allFungiTrinot_simplified.tsv")
## Add annotation
annotChyt <- read.csv("../../data/allFungiTrinot_simplified.tsv")
## Add annotation
annotChyt <- read.csv("../../data/allFungiTrinot_simplified.tsv", sep ="/t")
## Add annotation
annotChyt <- read.csv("../../data/allFungiTrinot_simplified.tsv", sep ="\t")
head(annotChyt)
annotChyt$gene_ontology_BLASTX
library(stringr)
df$extracted_go <- sapply(df$go_column, function(x) {
go_terms <- str_extract_all(x, "GO:\\d+")
paste(unlist(go_terms), collapse = ",")
})
annotChyt$extracted_go <-
sapply(annotChyt$gene_ontology_BLASTX, function(x) {
go_terms <- str_extract_all(x, "GO:\\d+")
paste(unlist(go_terms), collapse = ",")
})
View(annotChyt)
## Add annotation
annotChyt <- read.csv("../../data/allFungiTrinot_simplified.tsv", sep ="\t")
## extract GO terms in their own column
annotChyt$GO <-
sapply(annotChyt$gene_ontology_BLASTX, function(x) {
go_terms <- str_extract_all(x, "GO:\\d+")
paste(unlist(go_terms), collapse = ",")
})
resr_inf_effect_control$geneName
annotChyt %>% head
annotChyt$transcript_id
annotChyt$transcript_id %>% head
resr_inf_effect_control$geneName %>% head
## Match correct names
resr_inf_effect_control$transcript_id <- new_gene_trans_map_fungi$V2[
match(rownames(resr_inf_effect_control), new_gene_trans_map_fungi$V1)]
resr_inf_effect_control$transcript_id
match(resr_inf_effect_control$transcript_id, annotChyt$transcript_id)
annotChyt$gene_name[
match(resr_inf_effect_control$transcript_id, annotChyt$transcript_id)]
resr_inf_effect_control$transcript_id
annotChyt$transcript_id %>% head
resr_inf_effect_control %>% head
## MET control, chytrid infecting cyanobacteria vs not infecting (zoospores)
resr_inf_effect_control <- readRDS("../../data/resr_inf_effect_control.rds")
## Match correct names
resr_inf_effect_control$transcript_id <- new_gene_trans_map_fungi$V2[
match(rownames(resr_inf_effect_control), new_gene_trans_map_fungi$V1)]
resr_inf_effect_control %>% head
annotChyt %>% head
annotChyt[1,]
annotChyt[10,]#DMOA_HYPSL
annotChyt[2,]#DMOA_HYPSL
annotChyt[3,]#DMOA_HYPSL
resr_inf_effect_control$gene_name <- annotChyt$gene_name[
match(resr_inf_effect_control$transcript_id, annotChyt$transcript_id)]
grep("GLT1_SCHPO", resr_inf_effect_control$gene_name)
resr_inf_effect_control[
grep("GLT1_SCHPO", resr_inf_effect_control$gene_name),]
annotChyt[
grep("GLT1_SCHPO", annotChyt$gene_name),]
## MET control, chytrid infecting cyanobacteria vs not infecting (zoospores)
resr_inf_effect_control <- readRDS("../../data/resr_inf_effect_control.rds")
## Match correct names
resr_inf_effect_control$transcript_id <- new_gene_trans_map_fungi$V2[
match(rownames(resr_inf_effect_control), new_gene_trans_map_fungi$V1)]
## Match gene name based on blastx top hit
resr_inf_effect_control$gene_name_blastx <- annotChyt$gene_name[
match(resr_inf_effect_control$transcript_id, annotChyt$transcript_id)]
head(resr_inf_effect_control)
resr_inf_effect_control[100]
resr_inf_effect_control[100,]
annotChyt[annotChyt$transcript_id %in% "TRINITY_DN836_c1_g2_i3",]
## 3) Chytrid annotation
annotChyt <- read.csv("../../data/allFungiTrinot_simplified.tsv", sep ="\t")
annotChyt[annotChyt$transcript_id %in% "TRINITY_DN836_c1_g2_i3",]
annotChyt[annotChyt$transcript_id %in% "TRINITY_DN836_c1_g2_i3",]
unique(annotChyt)
annotChyt <- unique(annotChyt)
## 3) Chytrid annotation
annotChyt <- read.csv("../../data/allFungiTrinot_simplified.tsv", sep ="\t")
annotChyt <- unique(annotChyt)
## extract GO terms in their own column for GO analysis downstream
annotChyt$GO <-
sapply(annotChyt$gene_ontology_BLASTX, function(x) {
go_terms <- str_extract_all(x, "GO:\\d+")
paste(unlist(go_terms), collapse = ",")
})
## MET control, chytrid infecting cyanobacteria vs not infecting (zoospores)
resr_inf_effect_control <- readRDS("../../data/resr_inf_effect_control.rds")
## Match correct names
resr_inf_effect_control$transcript_id <- new_gene_trans_map_fungi$V2[
match(rownames(resr_inf_effect_control), new_gene_trans_map_fungi$V1)]
## Match gene name based on blastx top hit
resr_inf_effect_control$gene_name_blastx <- annotChyt$gene_name[
match(resr_inf_effect_control$transcript_id, annotChyt$transcript_id)]
head(resr_inf_effect_control)
resr_inf_effect_control[100,]
annotChyt[annotChyt$transcript_id %in% "TRINITY_DN836_c1_g2_i3",]
head(resr_inf_effect_control)
resr_inf_effect_control[100,]
head(resr_inf_effect_control)
resr_inf_effect_control[3,]
resr_inf_effect_control[3,"transcript_id"]
resr_inf_effect_control[3,"gene_name"]
resr_inf_effect_control[3,"gene_name_blastx"]
annotChyt[annotChyt$gene_name %in% "CDS1_YEAST",]
resr_inf_effect_control[3,"transcript_id"]
resr_inf_effect_control[3,"gene_name_blastx"]
annotChyt[annotChyt$gene_name %in% "CDS1_YEAST","transcript_id"]
resr_inf_effect_control[3,"transcript_id"]
resr_inf_effect_control[3,"gene_name_blastx"]
rownames(resr_inf_effect_control)[3]
resr_inf_effect_control[3,"transcript_id"]
resr_inf_effect_control[3,"gene_name_blastx"]
annotChyt[annotChyt$gene_name %in% "CDS1_YEAST","transcript_id"]
new_gene_trans_map_fungi$V1
resr_inf_effect_control[3,"transcript_id"]
new_gene_trans_map_fungi[new_gene_trans_map_fungi$V2 %in% "TRINITY_DN50449_c0_g1_i1",]
resr_inf_effect_control[3,"transcript_id"]
## MET control, chytrid infecting cyanobacteria vs not infecting (zoospores)
resr_inf_effect_control <- readRDS("../../data/resr_inf_effect_control.rds")
addInfoChyt <- function(res_chyt){
## Match correct names
res_chyt$transcript_id <- new_gene_trans_map_fungi$V2[
match(rownames(res_chyt), new_gene_trans_map_fungi$V1)]
## Match gene name based on blastx top hit
res_chyt$gene_name_blastx <- annotChyt$gene_name[
match(res_chyt$transcript_id, annotChyt$transcript_id)]
return(res_chyt)
}
resr_inf_effect_control <- addInfoChyt(res_chyt = resr_inf_effect_control)
makeVolcano <- function(res, title, subtitle){
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
# results_df$Ensembl_id = row.names(results_df)
results_df = results_df[order(results_df$padj),]
# results_genes = gconvert(row.names(res), organism = "mmusculus",
# target = "ENTREZGENE_ACC", filter_na = FALSE)
# add the gene names
# results_df = merge(results_df,
#                    results_genes[,c("input", "target", "name", "description")],
#                    by.x = "Ensembl_id", by.y = "input")
# results_df$Name <- ifelse(is.na(results_df$name), results_df$Ensembl_id, results_df$name)
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = rownames(results_df),
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
return(list(signifGenes = ressig, plot = plot))
}
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii",
subtitle = "MET unexposed")
## open bigger window
dev.new(width = 15, height = 12)
V_inf_effect_control$plot
makeVolcano <- function(res, title, subtitle, chyt=T){#by default for chytrid
if (chyt == T){
res$geneName = res$gene_name_blastx
}
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = results_df$geneName,
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
return(list(signifGenes = ressig, plot = plot))
}
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii",
subtitle = "MET unexposed")
V_inf_effect_control$plot
makeVolcano <- function(res, title, subtitle, chyt=T){#by default for chytrid
if (chyt == T){
res$geneName = ifelse(res$gene_name_blastx != ".", res$gene_name_blastx, NULL)
}
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = results_df$geneName,
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
return(list(signifGenes = ressig, plot = plot))
}
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = expression(paste0("infected vs non infected ", italic("P. agardhii"),
"gene expression")),
subtitle = "MET unexposed")
makeVolcano <- function(res, title, subtitle, chyt=T){#by default for chytrid
if (chyt == T){
res$geneName = ifelse(res$gene_name_blastx != ".", res$gene_name_blastx, "")
}
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = results_df$geneName,
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE)
return(list(signifGenes = ressig, plot = plot))
}
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = expression(paste0("infected vs non infected ", italic("P. agardhii"),
"gene expression")),
subtitle = "MET unexposed")
V_inf_effect_control$plot
## open bigger window
dev.new(width = 15, height = 12)
V_inf_effect_control$plot
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = paste0("infected vs non infected ", expression(italic("P. agardhii")),
"gene expression")),
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = paste0("infected vs non infected ", expression(italic("P. agardhii")),
"gene expression"),
subtitle = "MET unexposed")
V_inf_effect_control$plot
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii gene expression"),
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii gene expression",
subtitle = "MET unexposed")
V_inf_effect_control$plot
makeVolcano <- function(res, title, subtitle, chyt=T){#by default for chytrid
if (chyt == T){
res$geneName = ifelse(res$gene_name_blastx != ".", res$gene_name_blastx, "")
}
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = results_df$geneName,
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'pvalue', pCutoff = 0.05,
drawConnectors = TRUE, pCutoffCol = "padj")
return(list(signifGenes = ressig, plot = plot))
}
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii gene expression",
subtitle = "MET unexposed")
V_inf_effect_control$plot
makeVolcano <- function(res, title, subtitle, chyt=T){#by default for chytrid
if (chyt == T){
res$geneName = ifelse(res$gene_name_blastx != ".", res$gene_name_blastx, "")
}
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = results_df$geneName,
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE, labSize = 2)
return(list(signifGenes = ressig, plot = plot))
}
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii gene expression",
subtitle = "MET unexposed")
V_inf_effect_control$plot
makeVolcano <- function(res, title, subtitle, chyt=T){#by default for chytrid
if (chyt == T){
res$geneName = ifelse(res$gene_name_blastx != ".", res$gene_name_blastx, "")
}
### Extracting significant differentially expressed genes
## Convert Ensembl names to gene names (if they are known)
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = results_df$geneName,
x = 'log2FoldChange', title = title, subtitle = subtitle,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE, labSize = 3)
return(list(signifGenes = ressig, plot = plot))
}
V_inf_effect_control <- makeVolcano(
res = resr_inf_effect_control,
title = "infected vs non infected P. agardhii gene expression",
subtitle = "MET unexposed")
V_inf_effect_control$plot
resr_inf_effect_control$log2FoldChange
hist(resr_inf_effect_control$log2FoldChange)
hist(resr_inf_effect_control$log2FoldChange, breaks = 100)
V_inf_effect_control_noOL <- makeVolcano(
res = resr_inf_effect_control[abs(resr_inf_effect_control$log2FoldChange) <10,],
title = "infected vs non infected P. agardhii gene expression",
subtitle = "MET unexposed")
resr_inf_effect_control[abs(resr_inf_effect_control$log2FoldChange) <10,]
abs(resr_inf_effect_control$log2FoldChange)
abs(resr_inf_effect_control$log2FoldChange) < 10
resr_inf_effect_control[!is.na(resr_inf_effect_control$log2FoldChange) &
abs(resr_inf_effect_control$log2FoldChange) < 10,]
V_inf_effect_control_noOL <- makeVolcano(
res = resr_inf_effect_control[!is.na(resr_inf_effect_control$log2FoldChange) &
abs(resr_inf_effect_control$log2FoldChange) < 10,],
title = "infected vs non infected P. agardhii gene expression",
subtitle = "MET unexposed")
V_inf_effect_control$plot
V_inf_effect_control_noOL$plot
dev.new(width = 15, height = 12)
V_inf_effect_control_noOL$plot
V_inf_effect_control$plot
