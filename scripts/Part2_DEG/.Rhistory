RSEM_final_hope.gene$X %in% sequencedCyanoGenes,]
## Select only "cyano and both" samples
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
grep("chy", names(RSEM_final_hope.gene_cyano),invert = T)]
## Clean
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("X", "whichOrg", "whichTranscriptome")]
## Rename based on annotations
rownames(RSEM_final_hope.gene_cyano) = make.unique(annotationCyano$gene_name[
match(row.names(RSEM_final_hope.gene_cyano), annotationCyano$custom_gene_name)])
nrow(RSEM_final_hope.gene_cyano) # 3636 genes
## Merge identical proteins in only one row, suming the counts
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano %>%
mutate(base_name = sub("\\.\\d+$", "", rownames(RSEM_final_hope.gene_cyano))) %>%
group_by(base_name) %>%
summarise(across(everything(), sum)) %>%
tibble::column_to_rownames("base_name") %>% data.frame()
nrow(RSEM_final_hope.gene_cyano) # 3589 genes
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
## BiocManager::install("NOISeq")
library(NOISeq)
# Saturation plot
# The â€œSaturation" plot shows the number of features in the genome detected with more than k counts with
# the sequencing depth of the sample, and with higher and lower simulated sequencing depth
# Create an ExpressionSet object
counts_chy <- as.matrix(RSEM_final_hope.gene_chytrid)
eset_chy <- ExpressionSet(assayData = counts_chy)
mysaturation_chy = dat(eset_chy, k = 0, ndepth = 7, type = "saturation")
## Chytrid alone:
explo.plot(mysaturation_chy, toplot = 1, samples = 1:11)
## Chytrid alone:
explo.plot(mysaturation_chy, toplot = 1, samples = 1:11)
## Both organisms:
explo.plot(mysaturation_chy, toplot = 1, samples = 12:18)
## Chytrid alone:
explo.plot(mysaturation_chy, toplot = 1, samples = 1:11)
## Both organisms:
explo.plot(mysaturation_chy, toplot = 1, samples = 12:20)
## Both organisms:
explo.plot(mysaturation_chy, toplot = 1, samples = 12:19)
counts_cyano <- as.matrix(RSEM_final_hope.gene_cyano)
eset_cyano <- ExpressionSet(assayData = counts_cyano)
mysaturation_cyano = dat(eset_cyano, k = 0, ndepth = 7, type = "saturation")
## Both organisms:
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:8)
## Cyano alone
explo.plot(mysaturation_cyano, toplot = 1, samples = 9:20)
## Due to the discrepancies between the groups, we remove genes with
## zeros in at least 3/group (met+inf)
RSEM_final_hope.gene_chytrid <- filterRSEMno3Nullpergp(RSEM_final_hope.gene_chytrid)
RSEM_final_hope.gene_cyano <- filterRSEMno3Nullpergp(RSEM_final_hope.gene_cyano)
## check saturation
counts_chy <- as.matrix(RSEM_final_hope.gene_chytrid)
eset_chy <- ExpressionSet(assayData = counts_chy)
mysaturation_chy = dat(eset_chy, k = 0, ndepth = 7, type = "saturation")
ncol(RSEM_final_hope.gene_chytrid)
## all
explo.plot(mysaturation_chy, toplot = 1, samples = 1:19)
counts_cyano <- as.matrix(RSEM_final_hope.gene_cyano)
eset_cyano <- ExpressionSet(assayData = counts_cyano)
mysaturation_cyano = dat(eset_cyano, k = 0, ndepth = 7, type = "saturation")
names(RSEM_final_hope.gene_cyano)
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:20)
## Both organisms:
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:9)
## Cyano alone
explo.plot(mysaturation_cyano, toplot = 1, samples = 10:20)
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("met_both_In11")]
nrow(RSEM_final_hope.gene_chytrid) # 835
names(RSEM_final_hope.gene_chytrid)
nrow(RSEM_final_hope.gene_cyano) # 555
names(RSEM_final_hope.gene_cyano)
## all
explo.plot(mysaturation_chy, toplot = 1, samples = 1:19)
## Cyano alone
explo.plot(mysaturation_cyano, toplot = 1, samples = 10:20)
keep = rowSums(counts(RSEM_final_hope.gene_cyano) >= 10) >= 3
RSEM_final_hope.gene_cyano
rowSums(RSEM_final_hope.gene_cyano)
rowSums(RSEM_final_hope.gene_cyano >= 10)
rowSums(RSEM_final_hope.gene_cyano >= 10) >= 3
table(rowSums(RSEM_final_hope.gene_cyano >= 10) >= 3)
table(rowSums(RSEM_final_hope.gene_chytrid >= 10) >= 3)
source("~/Documents/GIT/2024_cyanochytridMET/scripts/Part2_DEG/functions.R")
## I. Chytrid transcripts
contrast_chytridgenome<- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_chytrid,
my_org="chy")
## II. Cyano transcripts
contrast_cyanogenome <- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_cyano,
my_org="cyano")
## Volcano plots
V_chytrid_inf_effect_control <- makeVolcano(
res = contrast_chytridgenome$resr_inf_effect_control,
title = "Infection effect on chytrid gene expression",
subtitle = "absence of metolachlor")
V_chytrid_inf_effect_met <- makeVolcano(
res = contrast_chytridgenome$resr_inf_effect_met,
title = "Infection effect on chytrid gene expression",
subtitle = "presence of metolachlor")
V_chytrid_met_effect_1org <- makeVolcano(
res = contrast_chytridgenome$resr_met_effect_1org,
title = "Metolachlor effect on chytrid gene expression",
subtitle = "free-living zoospores")
V_chytrid_met_effect_2orgs <- makeVolcano(
res = contrast_chytridgenome$resr_met_effect_2orgs,
title = "Metolachlor effect on chytrid gene expression",
subtitle = "during infection")
V_cyano_inf_effect_control <- makeVolcano(
res = contrast_cyanogenome$resr_inf_effect_control,
title = "Infection effect on cyanobacteria gene expression",
subtitle = "absence of metolachlor")
V_cyano_inf_effect_met <- makeVolcano(
res = contrast_cyanogenome$resr_inf_effect_met,
title = "Infection effect on cyanobacteria gene expression",
subtitle = "presence of metolachlor")
V_cyano_met_effect_1org <- makeVolcano(
res = contrast_cyanogenome$resr_met_effect_1org,
title = "Metolachlor effect on cyanobacteria gene expression",
subtitle = "uninfected cyanobacteria")
V_cyano_met_effect_2orgs <- makeVolcano(
res = contrast_cyanogenome$resr_met_effect_2orgs,
title = "Metolachlor effect on cyanobacteria gene expression",
subtitle = "infected cyanobacteria")
## open bigger window
dev.new(width = 15, height = 12)
pdf("../../figures/Fig1_chytrid_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_chytrid_inf_effect_control$plot,
V_chytrid_inf_effect_met$plot,
V_chytrid_met_effect_1org$plot,
V_chytrid_met_effect_2orgs$plot,
labels = c("a", "b", "c", "d"), label_size = 20)
dev.off()
dev.new(width = 15, height = 12)
pdf("../../figures/Fig2_cyano_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_cyano_inf_effect_control$plot,
V_cyano_inf_effect_met$plot,
V_cyano_met_effect_1org$plot,
V_cyano_met_effect_2orgs$plot,
labels = c("a", "b", "c", "d"), label_size = 20)
dev.off()
## Venn diagrams
# devtools::install_github("yanlinlin82/ggvenn")
library(ggvenn)
## Select differentially expressed genes in each comparison
getGenes <- function(x) {rownames(x[x$padj < 0.05 & !is.na(x$padj),])}
# Combine the lists into a named list for the Venn diagram
venn_data <- list("infection effect chytrid - control"=
getGenes(contrast_chytridgenome$resr_inf_effect_control),
"met effect chytrid - free living"=
getGenes(contrast_chytridgenome$resr_met_effect_1org),
"met effect chytrid - infecting"=
getGenes(contrast_chytridgenome$resr_met_effect_2orgs),
"infection effect chytrid - met"=
getGenes(contrast_chytridgenome$resr_inf_effect_met))
ggvenn(
venn_data, show_percentage = F, fill_color = rep("white", 4),
stroke_size = 0.5, set_name_size = 4
)
# Combine the lists into a named list for the Venn diagram
venn_data <- list("infection effect cyano - control"=
getGenes(contrast_cyanogenome$resr_inf_effect_control),
"met effect cyano - alone"=
getGenes(contrast_cyanogenome$resr_met_effect_1org),
"met effect cyano - infected"=
getGenes(contrast_cyanogenome$resr_met_effect_2orgs),
"infection effect cyano - met"=
getGenes(contrast_cyanogenome$resr_inf_effect_met))
ggvenn(
venn_data, show_percentage = F, fill_color = rep("white", 4),
stroke_size = 0.5, set_name_size = 4
)
## Save results in tables
selectDEGenes <- function(x) {x[x$padj < 0.05 & !is.na(x$padj),]}
## 1. chytrid
contrast_chytridgenome_DEG <- lapply(contrast_chytridgenome[1:4], selectDEGenes)
x <- list()
for (i in 1:4) {
if (nrow(contrast_chytridgenome_DEG[[i]]) > 0) {  # Check if the data frame is not empty
x[[i]] <- data.frame(
geneName = rownames(contrast_chytridgenome_DEG[[i]]),
padj = contrast_chytridgenome_DEG[[i]]$padj,
log2FoldChange = contrast_chytridgenome_DEG[[i]]$log2FoldChange
)
x[[i]]$comparison <- names(contrast_chytridgenome_DEG)[i]
} else {
x[[i]] <- data.frame()  # Create an empty data frame if no rows are present
}
}
contrast_chytridgenome_DEG <- do.call(rbind, x)
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_inf_effect_control"] <-
"Infection effect on chytrid gene expression, in the absence of MET"
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_inf_effect_met"] <-
"Infection effect on chytrid gene expression, in the presence of MET "
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_met_effect_1org"] <-
"MET effect on chytrid gene expression, in free-living chytrid zoospores"
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_met_effect_2orgs"] <-
"MET effect on chytrid gene expression, in infecting chytrid"
table(contrast_chytridgenome_DEG$comparison)
## 2. cyanobacteria
contrast_cyanogenome_DEG <- lapply(contrast_cyanogenome[1:4], selectDEGenes)
x <- list()
for (i in 1:4) {
if (nrow(contrast_cyanogenome_DEG[[i]]) > 0) {  # Check if the data frame is not empty
x[[i]] <- data.frame(
geneName = rownames(contrast_cyanogenome_DEG[[i]]),
padj = contrast_cyanogenome_DEG[[i]]$padj,
log2FoldChange = contrast_cyanogenome_DEG[[i]]$log2FoldChange
)
x[[i]]$comparison <- names(contrast_cyanogenome_DEG)[i]
} else {
x[[i]] <- data.frame()  # Create an empty data frame if no rows are present
}
}
contrast_cyanogenome_DEG <- do.call(rbind, x)
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_inf_effect_control"] <-
"Infection effect on cyanobacteria gene expression, in the absence of MET"
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_inf_effect_met"] <-
"Infection effect on cyanobacteria gene expression, in the presence of MET "
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_met_effect_1org"] <-
"MET effect on cyanobacteria gene expression, in uninfected cyanobacteria"
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_met_effect_2orgs"] <-
"MET effect on cyanobacteria gene expression, in infected bacteria"
table(contrast_cyanogenome_DEG$comparison)
## I. Chytrid transcripts
contrast_chytridgenome<- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_chytrid,
my_org="chy")
## II. Cyano transcripts
contrast_cyanogenome <- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_cyano,
my_org="cyano")
universe_chytrid = rownames(RSEM_final_hope.gene_chytrid)
universe_cyano = rownames(RSEM_final_hope.gene_cyano)
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = getGenes(contrast_chytridgenome$resr_inf_effect_control),
GO_df = GO_chytrid, isbubble = F)
rownames(RSEM_final_hope.gene_chytrid)
rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK"
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",]
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_wider()
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer()
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = "all")
?pivot_longer
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
ggplot(aes(x=name, y=value))
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
ggplot(aes(x=name, y=value)) +
geom_point()
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
separate(name, into = c("condition", "type", "sample"), sep = "_")
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
separate(name, into = c("condition", "type", "sample"), sep = "_")%>%
ggplot(aes(x=condition, y=value)) +
geom_point()
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
separate(name, into = c("condition", "type", "sample"), sep = "_")%>%
ggplot(aes(x=condition, y=value)) +
geom_jitter(position = position_jitter(0.1))
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
separate(name, into = c("condition", "type", "sample"), sep = "_")%>%
ggplot(aes(x=condition, y=value)) +
geom_jitter(position = position_jitter(0.1), size = 3, shape = 21)
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
separate(name, into = c("condition", "type", "sample"), sep = "_")%>%
ggplot(aes(x=condition, y=value)) +
geom_jitter(aes(fill = type), position = position_jitter(0.1), size = 3, shape = 21)
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
separate(name, into = c("condition", "type", "sample"), sep = "_")%>%
ggplot(aes(x=type, y=value)) +
geom_jitter(aes(fill = condition), position = position_jitter(0.1), size = 3, shape = 21)
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% "MOV10_CHICK",] %>%
pivot_longer(cols = 1:ncol(RSEM_final_hope.gene_chytrid))%>%
separate(name, into = c("condition", "type", "sample"), sep = "_")%>%
ggplot(aes(x=type, y=value)) +
geom_jitter(aes(fill = condition), position = position_jitter(0.1), size = 3, shape = 21)+
theme_bw()
# Combine the lists into a named list for the Venn diagram
venn_data <- list("infection effect chytrid - control"=
getGenes(contrast_chytridgenome$resr_inf_effect_control),
"met effect chytrid - free living"=
getGenes(contrast_chytridgenome$resr_met_effect_1org),
"met effect chytrid - infecting"=
getGenes(contrast_chytridgenome$resr_met_effect_2orgs),
"infection effect chytrid - met"=
getGenes(contrast_chytridgenome$resr_inf_effect_met))
ggvenn(
venn_data, show_percentage = F, fill_color = rep("white", 4),
stroke_size = 0.5, set_name_size = 4
)
getGenes(contrast_cyanogenome$resr_inf_effect_control)
getGenes(contrast_chytridgenome$resr_inf_effect_control)
getGenes(contrast_chytridgenome$resr_met_effect_2orgs)
## 1. chytrid
contrast_chytridgenome_DEG <- lapply(contrast_chytridgenome[1:4], selectDEGenes)
x <- list()
for (i in 1:4) {
if (nrow(contrast_chytridgenome_DEG[[i]]) > 0) {  # Check if the data frame is not empty
x[[i]] <- data.frame(
geneName = rownames(contrast_chytridgenome_DEG[[i]]),
padj = contrast_chytridgenome_DEG[[i]]$padj,
log2FoldChange = contrast_chytridgenome_DEG[[i]]$log2FoldChange
)
x[[i]]$comparison <- names(contrast_chytridgenome_DEG)[i]
} else {
x[[i]] <- data.frame()  # Create an empty data frame if no rows are present
}
}
contrast_chytridgenome_DEG <- do.call(rbind, x)
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_inf_effect_control"] <-
"Infection effect on chytrid gene expression, in the absence of MET"
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_inf_effect_met"] <-
"Infection effect on chytrid gene expression, in the presence of MET "
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_met_effect_1org"] <-
"MET effect on chytrid gene expression, in free-living chytrid zoospores"
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_met_effect_2orgs"] <-
"MET effect on chytrid gene expression, in infecting chytrid"
table(contrast_chytridgenome_DEG$comparison)
## 2. cyanobacteria
contrast_cyanogenome_DEG <- lapply(contrast_cyanogenome[1:4], selectDEGenes)
x <- list()
for (i in 1:4) {
if (nrow(contrast_cyanogenome_DEG[[i]]) > 0) {  # Check if the data frame is not empty
x[[i]] <- data.frame(
geneName = rownames(contrast_cyanogenome_DEG[[i]]),
padj = contrast_cyanogenome_DEG[[i]]$padj,
log2FoldChange = contrast_cyanogenome_DEG[[i]]$log2FoldChange
)
x[[i]]$comparison <- names(contrast_cyanogenome_DEG)[i]
} else {
x[[i]] <- data.frame()  # Create an empty data frame if no rows are present
}
}
contrast_cyanogenome_DEG <- do.call(rbind, x)
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_inf_effect_control"] <-
"Infection effect on cyanobacteria gene expression, in the absence of MET"
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_inf_effect_met"] <-
"Infection effect on cyanobacteria gene expression, in the presence of MET "
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_met_effect_1org"] <-
"MET effect on cyanobacteria gene expression, in uninfected cyanobacteria"
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_met_effect_2orgs"] <-
"MET effect on cyanobacteria gene expression, in infected bacteria"
table(contrast_cyanogenome_DEG$comparison)
fullDEGTable <- rbind(contrast_chytridgenome_DEG, contrast_cyanogenome_DEG)
fullDEGTable$padj <- signif(fullDEGTable$padj, 2)
fullDEGTable$log2FoldChange <- signif(fullDEGTable$log2FoldChange, 2)
write.csv(fullDEGTable, "../../figures/TableS1_fullDEGTable.tsv", row.names = F)
universe_chytrid = rownames(RSEM_final_hope.gene_chytrid)
universe_cyano = rownames(RSEM_final_hope.gene_cyano)
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = getGenes(contrast_chytridgenome$resr_inf_effect_control),
GO_df = GO_chytrid, isbubble = F)
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = getGenes(contrast_chytridgenome$resr_met_effect_1org),
GO_df = GO_chytrid, isbubble = F)
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = getGenes(contrast_chytridgenome$resr_met_effect_2orgs),
GO_df = GO_chytrid, isbubble = F)
## 2. Cyano
# getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
#              genelist = getGenes(contrast_cyanogenome$resr_inf_effect_control),
#              GO_df = GO_cyano, isbubble = F)
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org),
GO_df = GO_cyano, isbubble = F)
## infection effect on cyanobacteria in presence of metolachlor
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_met),
GO_df = GO_cyano, isbubble = F)
contrast_cyanogenome$resr_inf_effect_met
getGenes(contrast_cyanogenome$resr_inf_effect_met)
## infection effect on cyanobacteria in presence of metolachlor
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_met),
GO_df = GO_cyano, isbubble = F)
getGenes(contrast_cyanogenome$resr_inf_effect_met)
universe_cyano
annotationCyano
GO_cyano
## infection effect on cyanobacteria in presence of metolachlor
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_met),
GO_df = GO_cyano, isbubble = F)
universe = universe_cyano
annotation = annotationCyano
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_met)
GO_df = GO_cyano
isbubble = F
# A table that matches Term to Gene ID
term2gene = annotation[c("GO.accession", "gene_name")] %>%
dplyr::rename("term" = "GO.accession", "gene" = "gene_name") %>%
unique %>% data.frame()
term2gene
## Select for genes which have a GO term associated
term2gene = term2gene[!is.na(term2gene$term),]
term2gene
genelist = genelist[genelist %in% term2gene$gene]
universe = universe[universe %in% term2gene$gene]
genelist
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_met)
source("~/Documents/GIT/2024_cyanochytridMET/scripts/Part2_DEG/functions.R")
## infection effect on cyanobacteria in presence of metolachlor
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_met),
GO_df = GO_cyano, isbubble = F)
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_2orgs),
GO_df = GO_cyano, isbubble = F)
getGenes(contrast_cyanogenome$resr_met_effect_2orgs)
## 2. Cyano
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_control),
GO_df = GO_cyano, isbubble = F)
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org),
GO_df = GO_cyano, isbubble = F)
getGenes(contrast_cyanogenome$resr_met_effect_1org)
getGenes(contrast_cyanogenome$resr_met_effect_1org)
contrast_cyanogenome$resr_met_effect_1org
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange > 0
contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange > 0,]
## if we split up and downreg?
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange > 0,]),
GO_df = GO_cyano, isbubble = F)
source("~/Documents/GIT/2024_cyanochytridMET/scripts/Part2_DEG/functions.R")
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange < 0,]),
GO_df = GO_cyano, isbubble = F)
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange < 0,]),
GO_df = GO_cyano, isbubble = F)
getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange < 0,])
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange < 0,]),
GO_df = GO_cyano, isbubble = F)
getGenes(contrast_chytridgenome$resr_inf_effect_control)
getGenes(contrast_chytridgenome$resr_met_effect_1org)
# no significant GO terms
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = getGenes(contrast_chytridgenome$resr_met_effect_1org[
contrast_chytridgenome$resr_met_effect_1org$log2FoldChange > 0,]),
GO_df = GO_chytrid, isbubble = F)
# no significant GO terms
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = getGenes(contrast_chytridgenome$resr_met_effect_1org[
contrast_chytridgenome$resr_met_effect_1org$log2FoldChange < 0,]),
GO_df = GO_chytrid, isbubble = F)
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange > 0,]),
GO_df = GO_cyano, isbubble = F)
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = getGenes(contrast_chytridgenome$resr_met_effect_2orgs),
GO_df = GO_chytrid, isbubble = F)
getGenes(contrast_chytridgenome$resr_met_effect_2orgs)
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org),
GO_df = GO_cyano, isbubble = F)
getGenes(contrast_cyanogenome$resr_met_effect_1org)
## if we split up and downreg? Nope
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange > 0,]),
GO_df = GO_cyano, isbubble = F)
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_met_effect_1org[
contrast_cyanogenome$resr_met_effect_1org$log2FoldChange < 0,]),
GO_df = GO_cyano, isbubble = F)
## infection effect on cyanobacteria in presence of metolachlor
getGOBubbleZ(universe = universe_cyano, annotation = annotationCyano,
genelist = getGenes(contrast_cyanogenome$resr_inf_effect_met),
GO_df = GO_cyano, isbubble = F)
