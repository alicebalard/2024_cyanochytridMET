rownames(V_chytrid_met_effect_1org$signifGenes),
met_2orgs =
rownames(V_chytrid_met_effect_2orgs$signifGenes)))
ggvenn(data = list(inf_control =
rownames(V_cyano_inf_effect_control$signifGenes),
inf_met =
rownames(V_cyano_inf_effect_met$signifGenes),
met_1org=
rownames(V_cyano_met_effect_1org$signifGenes),
met_2orgs =
rownames(V_cyano_met_effect_2orgs$signifGenes)))
View(V_chytrid_inf_effect_control)
rownames(V_chytrid_inf_effect_control$signifGenes)
rownames(V_chytrid_inf_effect_met$signifGenes)
rownames(V_chytrid_met_effect_1org$signifGenes)
rownames(V_chytrid_met_effect_2orgs$signifGenes)
duplicated(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes))
duplicated(c(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes)))
c(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes))[
duplicated(c(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes)))]
chytridImpGenes <- c(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes))[
duplicated(c(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes)))]
cyanoImpGenes <- c(rownames(V_cyano_inf_effect_control$signifGenes),
rownames(V_cyano_inf_effect_met$signifGenes),
rownames(V_cyano_met_effect_1org$signifGenes),
rownames(V_cyano_met_effect_2orgs$signifGenes))[
duplicated(c(rownames(V_cyano_inf_effect_control$signifGenes),
rownames(V_cyano_inf_effect_met$signifGenes),
rownames(V_cyano_met_effect_1org$signifGenes),
rownames(V_cyano_met_effect_2orgs$signifGenes)))]
cyanoImpGenes
## 29th of November 2024
source("dataLoad.R")
## Let's observe the count matrix calculated by Trinity
RSEM_final_hope.gene <-
read.csv("../../data/run_DESEQ2_Erika/RSEM_final_hope.gene.counts.matrix", sep="\t")
##########################################################################
## Split by type of genes depending on in which samples they are expressed
# (1) chytrid genes expressed in chytrid alone and infecting --> give to Erika for DESEq2 1623 genes
# (2) cyanobacteri genes expressed in cyano alone and infected --> give to Erika for DESEq2 3420 genes
# (3) a mix that we need to understand --> GO analysis
a = ifelse(rowSums(RSEM_final_hope.gene[grep("chy", names(RSEM_final_hope.gene))]) !=0,
"in_chytrid_alone", "")
b = ifelse(rowSums(RSEM_final_hope.gene[grep("both", names(RSEM_final_hope.gene))]) !=0,
"in_both_organisms", "")
c = ifelse(rowSums(RSEM_final_hope.gene[grep("cyano", names(RSEM_final_hope.gene))]) !=0,
"in_cyano_alone", "")
RSEM_final_hope.gene$whichOrg <- trimws(paste(a,b,c, sep = " "))
RSEM_final_hope.gene$whichTranscriptome <- ifelse(
grepl("TRINITY", RSEM_final_hope.gene$X), "chytrid", "cyano")
table(RSEM_final_hope.gene$whichTranscriptome,
RSEM_final_hope.gene$whichOrg)
#              in_both_organisms in_both_organisms in_cyano_alone in_chytrid_alone
# chytrid  679               1764                              751              360
# cyano    629                  1                             3420                0
#
#         in_chytrid_alone  in_cyano_alone in_chytrid_alone in_both_organisms
# chytrid                                5                               1623
# cyano                                  2                                  0
#
#         in_chytrid_alone in_both_organisms in_cyano_alone in_cyano_alone
# chytrid                                               140             16
# cyano                                                 161            215
# (1) chytrid genes expressed in chytrid alone and infecting --> give to Erika for DESEq2 1623 genes
## Select only chytrid and both genes
RSEM_final_hope.gene_chytrid <- RSEM_final_hope.gene[RSEM_final_hope.gene$X %in% RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_chytrid_alone in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid","X"],]
## Select only chytrid and both samples
RSEM_final_hope.gene_chytrid =
RSEM_final_hope.gene_chytrid[grep("cyano", names(RSEM_final_hope.gene_chytrid),invert = T)]
## Clean
names(RSEM_final_hope.gene_chytrid)[1]=""
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[
!names(RSEM_final_hope.gene_chytrid) %in% c("whichOrg", "whichTranscriptome")]
## Investigate outliers (my function)
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1]))
## met_both_In11 and met_chy_Z10 outliers
RSEM_final_hope.gene_chytrid <-
RSEM_final_hope.gene_chytrid[!names(RSEM_final_hope.gene_chytrid) %in% c("met_chy_Z10", "met_both_In11")]
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1])) # good
# Z6 is a technical replicate of Z5
# Z12 is a technical replicate of Z7
# In6 is a technical replicate of In5
# In12 is a technical replicate of In11 --> no cluster by replicates, so these are sequencing differences
## Remove lowly expressed genes for robustness across experiments
# (the both experiments may have lower depth and not even detect these genes),
## 8 (both) vs 11 (chy) (and 12 cyano)
N=8
M=0
## At least in half of each group inf/not inf
RSEM_final_hope.gene_chytrid
rowSums(RSEM_final_hope.gene_chytrid[-1] >M)
RSEM_final_hope.gene_chytrid
names(RSEM_final_hope.gene_chytrid)
grep("chy", names(RSEM_final_hope.gene_chytrid))
RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid)),]
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid)),])
RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid)),]
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2
RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]
rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)
rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2
RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))][
rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2,]
rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2
rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2 &
rowSums(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))])/2
(rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2) &
(rowSums(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))])/2)
RSEM_final_hope.gene_chytrid[
(rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2) &
(rowSums(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))])/2),]
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
(rowSums(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))])/2) &
(rowSums(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))])/2),]
## 29th of November 2024
source("dataLoad.R")
## Let's observe the count matrix calculated by Trinity
RSEM_final_hope.gene <-
read.csv("../../data/run_DESEQ2_Erika/RSEM_final_hope.gene.counts.matrix", sep="\t")
##########################################################################
## Split by type of genes depending on in which samples they are expressed
# (1) chytrid genes expressed in chytrid alone and infecting --> give to Erika for DESEq2 1623 genes
# (2) cyanobacteri genes expressed in cyano alone and infected --> give to Erika for DESEq2 3420 genes
# (3) a mix that we need to understand --> GO analysis
a = ifelse(rowSums(RSEM_final_hope.gene[grep("chy", names(RSEM_final_hope.gene))]) !=0,
"in_chytrid_alone", "")
b = ifelse(rowSums(RSEM_final_hope.gene[grep("both", names(RSEM_final_hope.gene))]) !=0,
"in_both_organisms", "")
c = ifelse(rowSums(RSEM_final_hope.gene[grep("cyano", names(RSEM_final_hope.gene))]) !=0,
"in_cyano_alone", "")
RSEM_final_hope.gene$whichOrg <- trimws(paste(a,b,c, sep = " "))
RSEM_final_hope.gene$whichTranscriptome <- ifelse(
grepl("TRINITY", RSEM_final_hope.gene$X), "chytrid", "cyano")
table(RSEM_final_hope.gene$whichTranscriptome,
RSEM_final_hope.gene$whichOrg)
## Select only chytrid and both genes
RSEM_final_hope.gene_chytrid <- RSEM_final_hope.gene[RSEM_final_hope.gene$X %in% RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_chytrid_alone in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid","X"],]
## Select only chytrid and both samples
RSEM_final_hope.gene_chytrid =
RSEM_final_hope.gene_chytrid[grep("cyano", names(RSEM_final_hope.gene_chytrid),invert = T)]
## Clean
names(RSEM_final_hope.gene_chytrid)[1]=""
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[
!names(RSEM_final_hope.gene_chytrid) %in% c("whichOrg", "whichTranscriptome")]
## Investigate outliers (my function)
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1]))
## met_both_In11 and met_chy_Z10 outliers
RSEM_final_hope.gene_chytrid <-
RSEM_final_hope.gene_chytrid[!names(RSEM_final_hope.gene_chytrid) %in% c("met_chy_Z10", "met_both_In11")]
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1])) # good
## Remove lowly expressed genes for robustness across experiments
# (the both experiments may have lower depth and not even detect these genes),
## At least gene exp non null in half of each group inf/not inf
RSEM_final_hope.gene_chytrid = RSEM_final_hope.gene_chytrid[
(rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2) &
(rowSums(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))])/2),]
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1])) # more homogeneous
write.table(RSEM_final_hope.gene_chytrid,
"../../data/run_DESEQ2_Erika/RSEM_final_hope.gene_chytrid_03122024.matrix",
sep="\t", quote = F, row.names = F)
rownames(RSEM_final_hope.gene_chytrid) <- RSEM_final_hope.gene_chytrid[[1]]
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[-1]
# (2) cyanobacteria genes expressed in cyano alone and infected --> give to Erika for DESEq2 3420 genes
## Select only cyano and both genes
RSEM_final_hope.gene_cyano <- RSEM_final_hope.gene[RSEM_final_hope.gene$X %in% RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms in_cyano_alone" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano","X"],]
## Select only cyano and both samples
RSEM_final_hope.gene_cyano =
RSEM_final_hope.gene_cyano[grep("chy", names(RSEM_final_hope.gene_cyano),invert = T)]
## Clean
names(RSEM_final_hope.gene_cyano)[1]=""
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("whichOrg", "whichTranscriptome")]
## Investigate outliers (my function)
makeClusterWGCNA(t(RSEM_final_hope.gene_cyano[-1]))
## Remove lowly expressed genes for robustness across experiments
# (the both experiments may have lower depth and not even detect these genes),
## At least gene exp non null in half of each group inf/not inf
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
(rowSums(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))])/2) &
(rowSums(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))])/2),]
makeClusterWGCNA(t(RSEM_final_hope.gene_cyano[-1])) # more homogeneous
write.table(RSEM_final_hope.gene_cyano,
"../../data/run_DESEQ2_Erika/RSEM_final_hope.gene_cyano_03122024.matrix",
sep="\t", quote = F, row.names = F)
rownames(RSEM_final_hope.gene_cyano) <- RSEM_final_hope.gene_cyano[[1]]
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[-1]
##########################################
##########################################
## What can we eliminate as contamination? TBC later
##########################################
## What can we eliminate as contamination? TBC later
# # all the "chytrid" genes found when cyanobacteria is alone are contaminants! N=912
##########################################
## What can we eliminate as contamination? TBC later
# # all the "chytrid" genes found when cyanobacteria is alone are contaminants! N=912
# contaChytridTrans <- RSEM_final_hope.gene[RSEM_final_hope.gene$whichTranscriptome %in% "chytrid" &
##########################################
## What can we eliminate as contamination? TBC later
# # all the "chytrid" genes found when cyanobacteria is alone are contaminants! N=912
# contaChytridTrans <- RSEM_final_hope.gene[RSEM_final_hope.gene$whichTranscriptome %in% "chytrid" &
#                               grepl("in_cyano_alone", RSEM_final_hope.gene$whichOrg),"X"]
##########################################
## What can we eliminate as contamination? TBC later
# # all the "chytrid" genes found when cyanobacteria is alone are contaminants! N=912
# contaChytridTrans <- RSEM_final_hope.gene[RSEM_final_hope.gene$whichTranscriptome %in% "chytrid" &
#                               grepl("in_cyano_alone", RSEM_final_hope.gene$whichOrg),"X"]
#
source("R01_Erika_DESeq2.R")
##################################################
## Rename DESEq2 files with meaningfull gene names
## TO DO annotate longuest isoform (each isoform has an annotation otherwise, so we'll take the first for now)
giveGoodGeneNameChytrid <- function(chytridDESEq2){
row.names(chytridDESEq2) = annotationChytrid$gene_name[
match(row.names(chytridDESEq2), annotationChytrid$X.gene_id)]
return(chytridDESEq2)
}
chytrid_inf_effect_control <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_inf_effect_control)
chytrid_inf_effect_met <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_inf_effect_met)
chytrid_met_effect_1org <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_met_effect_1org)
chytrid_met_effect_2orgs <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_met_effect_2orgs)
giveGoodGeneNameCyano <- function(cyanoDESEq2){
row.names(cyanoDESEq2) = gene_trans_map_cyano$protein[
match(row.names(cyanoDESEq2), gene_trans_map_cyano$V1)]
return(cyanoDESEq2)
}
cyano_inf_effect_control <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_inf_effect_control)
cyano_inf_effect_met <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_inf_effect_met)
cyano_met_effect_1org <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_met_effect_1org)
cyano_met_effect_2orgs <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_met_effect_2orgs)
mylistResDESEQ2 <- list(chytrid_inf_effect_control=chytrid_inf_effect_control,
chytrid_inf_effect_met=chytrid_inf_effect_met,
chytrid_met_effect_1org=chytrid_met_effect_1org,
chytrid_met_effect_2orgs=chytrid_met_effect_2orgs,
cyano_inf_effect_control=cyano_inf_effect_control,
cyano_inf_effect_met=cyano_inf_effect_met,
cyano_met_effect_1org=cyano_met_effect_1org,
cyano_met_effect_2orgs=cyano_met_effect_2orgs)
###############
## Run plots ##
###############
makeVolcano <- function(res, title){
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = row.names(results_df),
x = 'log2FoldChange', title = title,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE, labSize = 3)
return(list(signifGenes = ressig, plot = plot))
}
## open bigger window
V_chytrid_inf_effect_control <- makeVolcano(
res = chytrid_inf_effect_control,
title = "infecting vs non infecting chytrid gene expression, no MET")
V_chytrid_inf_effect_met <- makeVolcano(
res = chytrid_inf_effect_met,
title = "infecting vs non infecting chytrid gene expression, MET")
V_chytrid_met_effect_1org <- makeVolcano(
res = chytrid_met_effect_1org,
title = "MET effect on chytrid gene expression")
V_chytrid_met_effect_2orgs <- makeVolcano(
res = chytrid_met_effect_2orgs,
title = "MET effect on chytrid infecting bacteria gene expression")
V_cyano_inf_effect_control <- makeVolcano(
res = cyano_inf_effect_control,
title = "infected vs non infected cyano gene expression, no MET")
V_cyano_inf_effect_met <- makeVolcano(
res = cyano_inf_effect_met,
title = "infected vs non infected cyano gene expression, MET")
V_cyano_met_effect_1org <- makeVolcano(
res = cyano_met_effect_1org,
title = "MET effect on cyano gene expression")
V_cyano_met_effect_2orgs <- makeVolcano(
res = cyano_met_effect_2orgs,
title = "MET effect on cyano infecting bacteria gene expression")
## Extreme log2 fold changes could also arise from issues related to:
### Low counts: If the gene has very low counts in one condition (e.g., zero or near-zero),
# even a small count in the other condition can lead to a high fold change.
### Normalization methods: Ensure appropriate normalization techniques are applied during
# the analysis. Poor normalization can distort fold change calculations.
## open bigger window
dev.new(width = 15, height = 12)
pdf("../../figures/Fig1_chytrid_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_chytrid_inf_effect_control$plot,
V_chytrid_inf_effect_met$plot,
V_chytrid_met_effect_1org$plot,
V_chytrid_met_effect_2orgs$plot)
dev.off()
dev.new(width = 15, height = 12)
pdf("../../figures/Fig2_cyano_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_cyano_inf_effect_control$plot,
V_cyano_inf_effect_met$plot,
V_cyano_met_effect_1org$plot,
V_cyano_met_effect_2orgs$plot)
dev.off()
ggvenn(data = list(inf_control =
rownames(V_chytrid_inf_effect_control$signifGenes),
inf_met =
rownames(V_chytrid_inf_effect_met$signifGenes),
met_1org=
rownames(V_chytrid_met_effect_1org$signifGenes),
met_2orgs =
rownames(V_chytrid_met_effect_2orgs$signifGenes)))
ggvenn(data = list(inf_control =
rownames(V_cyano_inf_effect_control$signifGenes),
inf_met =
rownames(V_cyano_inf_effect_met$signifGenes),
met_1org=
rownames(V_cyano_met_effect_1org$signifGenes),
met_2orgs =
rownames(V_cyano_met_effect_2orgs$signifGenes)))
chytridImpGenes <- c(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes))[
duplicated(c(rownames(V_chytrid_inf_effect_control$signifGenes),
rownames(V_chytrid_inf_effect_met$signifGenes),
rownames(V_chytrid_met_effect_1org$signifGenes),
rownames(V_chytrid_met_effect_2orgs$signifGenes)))]
cyanoImpGenes <- c(rownames(V_cyano_inf_effect_control$signifGenes),
rownames(V_cyano_inf_effect_met$signifGenes),
rownames(V_cyano_met_effect_1org$signifGenes),
rownames(V_cyano_met_effect_2orgs$signifGenes))[
duplicated(c(rownames(V_cyano_inf_effect_control$signifGenes),
rownames(V_cyano_inf_effect_met$signifGenes),
rownames(V_cyano_met_effect_1org$signifGenes),
rownames(V_cyano_met_effect_2orgs$signifGenes)))]
cyanoImpGenes
V_chytrid_inf_effect_control$signifGenes
# data.frame(
V_chytrid_inf_effect_control$signifGenes %>% mutate(group = "chytrid_inf_effect_control")
# data.frame(
V_chytrid_inf_effect_control$signifGenes %>% mutate(group = "infection effect on chytrid gene expression, absence of MET")
rbind(
V_chytrid_inf_effect_control$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in absence of MET"),
V_chytrid_inf_effect_met$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in presence of MET"),
V_chytrid_met_effect_1org$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in absence of cyanobacteria"),
V_chytrid_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in presence of cyanobacteria"),
V_cyano_inf_effect_control$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in absence of MET"),
V_cyano_inf_effect_met$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in presence of MET"),
V_cyano_met_effect_1org$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in absence of chytrid"),
V_cyano_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in presence of chytrid"))
fullDEGTable = rbind(
V_chytrid_inf_effect_control$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in absence of MET"),
V_chytrid_inf_effect_met$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in presence of MET"),
V_chytrid_met_effect_1org$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in absence of cyanobacteria"),
V_chytrid_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in presence of cyanobacteria"),
V_cyano_inf_effect_control$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in absence of MET"),
V_cyano_inf_effect_met$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in presence of MET"),
V_cyano_met_effect_1org$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in absence of chytrid"),
V_cyano_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in presence of chytrid"))
write.csv("../../figures/TableS1_fullDEGTable.csv", quote = F)
write.csv(fullDEGTable, "../../figures/TableS1_fullDEGTable.csv", quote = F)
write.csv(fullDEGTable, "../../figures/TableS1_fullDEGTable.csv", quote = F, sep = "\t")
write.csv(fullDEGTable, "../../figures/TableS1_fullDEGTable.csv", quote = F, sep = "/t")
write.csv(fullDEGTable, "../../figures/TableS1_fullDEGTable.csv", quote = F, sep = ";")
write.csv(x = fullDEGTable, "../../figures/TableS1_fullDEGTable.csv", quote = F, sep = "\t")
write.table(x = fullDEGTable, "../../figures/TableS1_fullDEGTable.csv", quote = F, sep = "\t")
fullDEGTable = rbind(
V_chytrid_inf_effect_control$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in absence of MET"),
V_chytrid_inf_effect_met$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in presence of MET"),
V_chytrid_met_effect_1org$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in absence of cyanobacteria"),
V_chytrid_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in presence of cyanobacteria"),
V_cyano_inf_effect_control$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in absence of MET"),
V_cyano_inf_effect_met$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in presence of MET"),
V_cyano_met_effect_1org$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in absence of chytrid"),
V_cyano_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in presence of chytrid"))
write.table(x = fullDEGTable, "../../figures/TableS1_fullDEGTable.tsv", quote = F, sep = "\t")
source("R01_Erika_DESeq2.R")
##################################################
## Rename DESEq2 files with meaningfull gene names
## TO DO annotate longuest isoform (each isoform has an annotation otherwise, so we'll take the first for now)
giveGoodGeneNameChytrid <- function(chytridDESEq2){
row.names(chytridDESEq2) = annotationChytrid$gene_name[
match(row.names(chytridDESEq2), annotationChytrid$X.gene_id)]
return(chytridDESEq2)
}
chytrid_inf_effect_control <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_inf_effect_control)
chytrid_inf_effect_met <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_inf_effect_met)
chytrid_met_effect_1org <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_met_effect_1org)
chytrid_met_effect_2orgs <- giveGoodGeneNameChytrid(contrast_chytridgenome$resr_met_effect_2orgs)
giveGoodGeneNameCyano <- function(cyanoDESEq2){
row.names(cyanoDESEq2) = gene_trans_map_cyano$protein[
match(row.names(cyanoDESEq2), gene_trans_map_cyano$V1)]
return(cyanoDESEq2)
}
cyano_inf_effect_control <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_inf_effect_control)
cyano_inf_effect_met <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_inf_effect_met)
cyano_met_effect_1org <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_met_effect_1org)
cyano_met_effect_2orgs <- giveGoodGeneNameCyano(contrast_cyanogenome$resr_met_effect_2orgs)
mylistResDESEQ2 <- list(chytrid_inf_effect_control=chytrid_inf_effect_control,
chytrid_inf_effect_met=chytrid_inf_effect_met,
chytrid_met_effect_1org=chytrid_met_effect_1org,
chytrid_met_effect_2orgs=chytrid_met_effect_2orgs,
cyano_inf_effect_control=cyano_inf_effect_control,
cyano_inf_effect_met=cyano_inf_effect_met,
cyano_met_effect_1org=cyano_met_effect_1org,
cyano_met_effect_2orgs=cyano_met_effect_2orgs)
###############
## Run plots ##
###############
makeVolcano <- function(res, title){
results_df = as.data.frame(res)
results_df = results_df[order(results_df$padj),]
# Subset the results to keep only significant genes
ressig = results_df[results_df$padj < 0.05 & !is.na(results_df$padj),]
## Volcano plot
plot = EnhancedVolcano(results_df,
lab = row.names(results_df),
x = 'log2FoldChange', title = title,
y = 'padj', pCutoff = 0.05,
drawConnectors = TRUE, labSize = 3)
return(list(signifGenes = ressig, plot = plot))
}
## open bigger window
V_chytrid_inf_effect_control <- makeVolcano(
res = chytrid_inf_effect_control,
title = "infecting vs non infecting chytrid gene expression, no MET")
V_chytrid_inf_effect_met <- makeVolcano(
res = chytrid_inf_effect_met,
title = "infecting vs non infecting chytrid gene expression, MET")
V_chytrid_met_effect_1org <- makeVolcano(
res = chytrid_met_effect_1org,
title = "MET effect on chytrid gene expression")
V_chytrid_met_effect_2orgs <- makeVolcano(
res = chytrid_met_effect_2orgs,
title = "MET effect on chytrid infecting bacteria gene expression")
V_cyano_inf_effect_control <- makeVolcano(
res = cyano_inf_effect_control,
title = "infected vs non infected cyano gene expression, no MET")
V_cyano_inf_effect_met <- makeVolcano(
res = cyano_inf_effect_met,
title = "infected vs non infected cyano gene expression, MET")
V_cyano_met_effect_1org <- makeVolcano(
res = cyano_met_effect_1org,
title = "MET effect on cyano gene expression")
V_cyano_met_effect_2orgs <- makeVolcano(
res = cyano_met_effect_2orgs,
title = "MET effect on cyano infecting bacteria gene expression")
## Extreme log2 fold changes could also arise from issues related to:
### Low counts: If the gene has very low counts in one condition (e.g., zero or near-zero),
# even a small count in the other condition can lead to a high fold change.
### Normalization methods: Ensure appropriate normalization techniques are applied during
# the analysis. Poor normalization can distort fold change calculations.
## open bigger window
dev.new(width = 15, height = 12)
pdf("../../figures/Fig1_chytrid_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_chytrid_inf_effect_control$plot,
V_chytrid_inf_effect_met$plot,
V_chytrid_met_effect_1org$plot,
V_chytrid_met_effect_2orgs$plot)
dev.off()
dev.new(width = 15, height = 12)
pdf("../../figures/Fig2_cyano_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_cyano_inf_effect_control$plot,
V_cyano_inf_effect_met$plot,
V_cyano_met_effect_1org$plot,
V_cyano_met_effect_2orgs$plot)
dev.off()
fullDEGTable = rbind(
V_chytrid_inf_effect_control$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in absence of MET"),
V_chytrid_inf_effect_met$signifGenes %>% mutate(group = "infection effect on chytrid gene expression in presence of MET"),
V_chytrid_met_effect_1org$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in absence of cyanobacteria"),
V_chytrid_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on chytrid gene expression in presence of cyanobacteria"),
V_cyano_inf_effect_control$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in absence of MET"),
V_cyano_inf_effect_met$signifGenes %>% mutate(group = "infection effect on cyanobacteria gene expression in presence of MET"),
V_cyano_met_effect_1org$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in absence of chytrid"),
V_cyano_met_effect_2orgs$signifGenes %>% mutate(group = "MET effect on cyanobacteria gene expression in presence of chytrid"))
write.table(x = fullDEGTable, "../../figures/TableS1_fullDEGTable.tsv", quote = F, sep = "\t")
