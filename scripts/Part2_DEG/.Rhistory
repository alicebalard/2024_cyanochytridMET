df$trt
df
grep("met", df$variable)
grepl("met", df$variable)
df$trt = ifelse(grepl("met", df$variable), "met", "control")
df
ggplot(df, aes(x=trt, y = value)) + geom_jitter()
ggplot(df, aes(x=trt, y = value)) + geom_boxplot() +geom_jitter()
ggplot(df, aes(x=trt, y = value)) + geom_boxplot() +geom_point()
ggplot(df, aes(x=trt, y = value)) + geom_boxplot() +geom_point(size =4)
df = melt(RSEM_final_hope.gene_b[2,])
df$trt = ifelse(grepl("met", df$variable), "met", "control")
ggplot(df, aes(x=trt, y = value)) + geom_boxplot() +geom_point(size =4)
df = melt(RSEM_final_hope.gene_b[3,])
df$trt = ifelse(grepl("met", df$variable), "met", "control")
ggplot(df, aes(x=trt, y = value)) + geom_boxplot() +geom_point(size =4)
df$trt
t.test(df$trt ~ df$value)
t.test(df$value)
t.test(df$value, df$trt)
df$value
?t.test()
t.test(df$value[df$trt %in% "met"], df$value[df$trt %in% "control"])
df = melt(RSEM_final_hope.gene_b[1,])
df$trt = ifelse(grepl("met", df$variable), "met", "control")
t.test(df$value[df$trt %in% "met"], df$value[df$trt %in% "control"])
df = melt(RSEM_final_hope.gene_b[2,])
df$trt = ifelse(grepl("met", df$variable), "met", "control")
t.test(df$value[df$trt %in% "met"], df$value[df$trt %in% "control"])
df = melt(RSEM_final_hope.gene_b[3,])
df$trt = ifelse(grepl("met", df$variable), "met", "control")
t.test(df$value[df$trt %in% "met"], df$value[df$trt %in% "control"])
df$value[df$trt %in% "met"]
df$value[df$trt %in% "control"]
# (b)
# 1764 chytrid in_both_organisms --> virulence genes of chytrid!!! 10 filaments with TONS of infection
RSEM_final_hope.gene_b <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid",]
## Select only infection samples
RSEM_final_hope.gene_b <- RSEM_final_hope.gene_b[
grep("both", names(RSEM_final_hope.gene_b))]
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_b = RSEM_final_hope.gene_b[
(rowSums(RSEM_final_hope.gene_b[grep("control", names(RSEM_final_hope.gene_b))]>0)>
ncol(RSEM_final_hope.gene_b[grep("control", names(RSEM_final_hope.gene_b))])/2) &
(rowSums(RSEM_final_hope.gene_b[grep("met", names(RSEM_final_hope.gene_b))]>0)>
ncol(RSEM_final_hope.gene_b[grep("met", names(RSEM_final_hope.gene_b))])/2),]
df = melt(RSEM_final_hope.gene_b[3,])
df$trt = ifelse(grepl("met", df$variable), "met", "control")
t.test(df$value[df$trt %in% "met"], df$value[df$trt %in% "control"])
matchChytridNameAnnot(RSEM_final_hope.gene[row.names(RSEM_final_hope.gene_b),"X"])
matchChytridNameAnnot(RSEM_final_hope.gene[row.names(RSEM_final_hope.gene_b),"X"])
# RLR78_PLAVT" "4CLL8_ARATH" "MAK5_CRYNB"
# RLR78_PLAVT" "4CLL8_ARATH" "MAK5_CRYNB"
# RLR78_PLAVT = code for the secreted RxLR effector protein 78, virulence factor identified in the Downy mildew of grapevine
# RLR78_PLAVT" "4CLL8_ARATH" "MAK5_CRYNB"
# RLR78_PLAVT = code for the secreted RxLR effector protein 78, virulence factor identified in the Downy mildew of grapevine
# 4CLL8_ARATH = code for 4-coumarate--CoA ligase-like 8 Arabidopsis thaliana (Mouse-ear cress)
# (d)
# 215 --> cyano genes only expressed outside of infection?
## TO DO
# in how many samples are they found (>half)
# top expressed
# --> GO on these to find the big functions
# DEG MET/not MET --> does met affects the virulence?
RSEM_final_hope.gene_d <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_cyano_only" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
RSEM_final_hope.gene_d
RSEM_final_hope.gene$whichTranscriptome
RSEM_final_hope.gene$whichTranscriptome %>% table
RSEM_final_hope.gene$whichOrg %>% table
# (d)
# 215 --> cyano genes only expressed outside of infection?
## TO DO
# in how many samples are they found (>half)
# top expressed
# --> GO on these to find the big functions
# DEG MET/not MET --> does met affects the virulence?
RSEM_final_hope.gene_d <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_cyano_alone" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
RSEM_final_hope.gene_d
## Select only cyano samples
RSEM_final_hope.gene_d <- RSEM_final_hope.gene_d[
grep("cyano", names(RSEM_final_hope.gene_d))]
RSEM_final_hope.gene_d
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_d = RSEM_final_hope.gene_d[
(rowSums(RSEM_final_hope.gene_d[grep("control", names(RSEM_final_hope.gene_d))]>0)>
ncol(RSEM_final_hope.gene_d[grep("control", names(RSEM_final_hope.gene_d))])/2) &
(rowSums(RSEM_final_hope.gene_d[grep("met", names(RSEM_final_hope.gene_d))]>0)>
ncol(RSEM_final_hope.gene_d[grep("met", names(RSEM_final_hope.gene_d))])/2),]
RSEM_final_hope.gene_d
nrow(RSEM_final_hope.gene_d)
# (e)
## one gene cyano only expressed during infection
RSEM_final_hope.gene_e <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
## Select only cyano samples
RSEM_final_hope.gene_e <- RSEM_final_hope.gene_e[
grep("cyano", names(RSEM_final_hope.gene_e))]
RSEM_final_hope.gene_e
# (e)
## one gene cyano only expressed during infection
RSEM_final_hope.gene_e <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
RSEM_final_hope.gene_e
# (e)
## one gene cyano only expressed during infection
RSEM_final_hope.gene_e <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
## Select only cyano samples
RSEM_final_hope.gene_e <- RSEM_final_hope.gene_e[
grep("both", names(RSEM_final_hope.gene_e))]
RSEM_final_hope.gene_e
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_e = RSEM_final_hope.gene_e[
(rowSums(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))])/2) &
(rowSums(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))])/2),]
RSEM_final_hope.gene_e
## 29th of November 2024
source("dataLoad.R")
## Let's observe the count matrix calculated by Trinity
RSEM_final_hope.gene <-
read.csv("../../data/run_DESEQ2_Erika/RSEM_final_hope.gene.counts.matrix", sep="\t")
##########################################################################
## Split by type of genes depending on in which samples they are expressed
# (1) chytrid genes expressed in chytrid alone and infecting --> give to Erika for DESEq2 1623 genes
# (2) cyanobacteria genes expressed in cyano alone and infected --> give to Erika for DESEq2 3420 genes
# (3) a mix that we need to understand --> GO analysis
a = ifelse(rowSums(RSEM_final_hope.gene[grep("chy", names(RSEM_final_hope.gene))]) !=0,
"in_chytrid_alone", "")
b = ifelse(rowSums(RSEM_final_hope.gene[grep("both", names(RSEM_final_hope.gene))]) !=0,
"in_both_organisms", "")
c = ifelse(rowSums(RSEM_final_hope.gene[grep("cyano", names(RSEM_final_hope.gene))]) !=0,
"in_cyano_alone", "")
RSEM_final_hope.gene$whichOrg <- trimws(paste(a,b,c, sep = " "))
RSEM_final_hope.gene$whichTranscriptome <- ifelse(
grepl("TRINITY", RSEM_final_hope.gene$X), "chytrid", "cyano")
RSEM_final_hope.gene$whichOrg %>% head(20)
RSEM_final_hope.gene[8,]
table(RSEM_final_hope.gene$whichTranscriptome,
RSEM_final_hope.gene$whichOrg)
#            0  in_both_organisms in_both_organisms in_cyano_alone in_chytrid_alone
# chytrid  679               1764                              751              360
# cyano    629                  1                             3420                0
#
#         in_chytrid_alone  in_cyano_alone in_chytrid_alone in_both_organisms
# chytrid                                5                               1623
# cyano                                  2                                  0
#
#         in_chytrid_alone in_both_organisms in_cyano_alone in_cyano_alone
# chytrid                                               140             16
# cyano                                                 161            215
###################
## Define groups ##
###################
## Figure X ##
##### 1. rm contamination #####
# chytrid genes also found in when cyanobacteria is alone:
# chytrid + in_both_organisms in_cyano_alone
# chytrid + in_chytrid_alone  in_cyano_alone
# chytrid + in_chytrid_alone in_both_organisms in_cyano_alone
# chytrid + in_cyano_alone
write.csv(RSEM_final_hope.gene[
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid" & RSEM_final_hope.gene$whichOrg %in%
c("in_both_organisms in_cyano_alone",
"in_chytrid_alone  in_cyano_alone",
"in_chytrid_alone in_both_organisms in_cyano_alone",
"in_cyano_alone"),"X"],
"../../data/listOfTranscriptContaminant_toRmFromChytridTranscriptome", quote = F, row.names = F)
##### 2. preparation for DE analysis #####
# (c) chytrid genes expressed in chytrid alone and infecting
## Select only chytrid and both genes
RSEM_final_hope.gene_chytrid <- RSEM_final_hope.gene[RSEM_final_hope.gene$X %in% RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_chytrid_alone in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid","X"],]
## Select only chytrid and both samples
RSEM_final_hope.gene_chytrid =
RSEM_final_hope.gene_chytrid[grep("cyano", names(RSEM_final_hope.gene_chytrid),invert = T)]
## Clean
names(RSEM_final_hope.gene_chytrid)[1]=""
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[
!names(RSEM_final_hope.gene_chytrid) %in% c("whichOrg", "whichTranscriptome")]
## Investigate outliers (my function)
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1]))
## met_both_In11 and met_chy_Z10 outliers
RSEM_final_hope.gene_chytrid <-
RSEM_final_hope.gene_chytrid[!names(RSEM_final_hope.gene_chytrid) %in% c("met_chy_Z10", "met_both_In11")]
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1])) # good
# Z6 is a technical replicate of Z5
# Z12 is a technical replicate of Z7
# In6 is a technical replicate of In5
# In12 is a technical replicate of In11 --> no cluster by replicates, so these are sequencing differences
## Remove lowly expressed genes for robustness across experiments
# (the both experiments may have lower depth and not even detect these genes),
## At least gene exp non null in half of each group inf/not inf
RSEM_final_hope.gene_chytrid = RSEM_final_hope.gene_chytrid[
(rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2) &
(rowSums(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))])/2),]
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1])) # more homogeneous
write.table(RSEM_final_hope.gene_chytrid,
"../../data/run_DESEQ2_Erika/RSEM_final_hope.gene_chytrid_03122024.matrix",
sep="\t", quote = F, row.names = F)
rownames(RSEM_final_hope.gene_chytrid) <- RSEM_final_hope.gene_chytrid[[1]]
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[-1]
names(RSEM_final_hope.gene_chytrid)
# (f) cyanobacteria genes expressed in cyano alone and infected --> give to Erika for DESEq2 3420 genes
## Select only cyano and both genes
RSEM_final_hope.gene_cyano <- RSEM_final_hope.gene[RSEM_final_hope.gene$X %in% RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms in_cyano_alone" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano","X"],]
## Select only cyano and both samples
RSEM_final_hope.gene_cyano =
RSEM_final_hope.gene_cyano[grep("chy", names(RSEM_final_hope.gene_cyano),invert = T)]
## Clean
names(RSEM_final_hope.gene_cyano)[1]=""
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("whichOrg", "whichTranscriptome")]
## Investigate outliers (my function)
makeClusterWGCNA(t(RSEM_final_hope.gene_cyano[-1]))
## no outliers!
## Remove lowly expressed genes for robustness across experiments
# (the both experiments may have lower depth and not even detect these genes),
## At least gene exp non null in half of each group inf/not inf
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
(rowSums(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))])/2) &
(rowSums(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))])/2),]
makeClusterWGCNA(t(RSEM_final_hope.gene_cyano[-1])) # more homogeneous
write.table(RSEM_final_hope.gene_cyano,
"../../data/run_DESEQ2_Erika/RSEM_final_hope.gene_cyano_03122024.matrix",
sep="\t", quote = F, row.names = F)
rownames(RSEM_final_hope.gene_cyano) <- RSEM_final_hope.gene_cyano[[1]]
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[-1]
names(RSEM_final_hope.gene_cyano)
nrow(RSEM_final_hope.gene_cyano)
nrow(RSEM_final_hope.gene_chytrid) # 2166
RSEM_final_hope.gene_e
# (e)
## one gene cyano only expressed during infection
RSEM_final_hope.gene_e <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
## Select only cyano samples
RSEM_final_hope.gene_e <- RSEM_final_hope.gene_e[
grep("both", names(RSEM_final_hope.gene_e))]
RSEM_final_hope.gene_e
rownames(RSEM_final_hope.gene_e)
RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),]
RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"]
gene_trans_map_cyano$protein[
match(RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"], gene_trans_map_cyano$V1)]
source("~/Documents/GIT/2024_cyanochytridMET/scripts/Part2_DEG/functions.R")
matchCyanoNameAnnot(RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"])
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_e = RSEM_final_hope.gene_e[
(rowSums(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))])/2) &
(rowSums(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))])/2),]
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_e[
(rowSums(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))])/2) &
(rowSums(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))])/2),]
# (e)
## one gene cyano only expressed during infection
RSEM_final_hope.gene_e <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
## Select only cyano samples
RSEM_final_hope.gene_e <- RSEM_final_hope.gene_e[
grep("both", names(RSEM_final_hope.gene_e))]
matchCyanoNameAnnot(RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"])
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_e[
(rowSums(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))])/2) &
(rowSums(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))])/2),]
matchCyanoNameAnnot <- function(X){
gene_trans_map_cyano[
match(X, gene_trans_map_cyano$V1),]
}
matchCyanoNameAnnot(RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"])
source("~/Documents/GIT/2024_cyanochytridMET/scripts/Part2_DEG/functions.R")
matchCyanoNameAnnot(RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"])
gene_trans_map_cyano[
match(X, gene_trans_map_cyano$V1),]
matchCyanoNameAnnot <- function(X){
gene_trans_map_cyano[
match(X, gene_trans_map_cyano$V1),]
}
matchCyanoNameAnnot(RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"])
gene_trans_map_cyano$V2
gene_trans_map_cyano$V2 %>% tail
# Remove everything before and including "WP_" and everything after the first underscore
gsub('.*(WP_[0-9]+\\.[0-9]+)_[^ ]*.*', '\\1', "cyano_NZ_LR882957.1_cds_WP_254035918.1_4427_g1_i1")
gene_trans_map_cyano$V2
## 29th of November 2024
source("dataLoad.R")
## Let's observe the count matrix calculated by Trinity
RSEM_final_hope.gene <-
read.csv("../../data/run_DESEQ2_Erika/RSEM_final_hope.gene.counts.matrix", sep="\t")
##########################################################################
## Split by type of genes depending on in which samples they are expressed
# (1) chytrid genes expressed in chytrid alone and infecting --> give to Erika for DESEq2 1623 genes
# (2) cyanobacteria genes expressed in cyano alone and infected --> give to Erika for DESEq2 3420 genes
# (3) a mix that we need to understand --> GO analysis
a = ifelse(rowSums(RSEM_final_hope.gene[grep("chy", names(RSEM_final_hope.gene))]) !=0,
"in_chytrid_alone", "")
b = ifelse(rowSums(RSEM_final_hope.gene[grep("both", names(RSEM_final_hope.gene))]) !=0,
"in_both_organisms", "")
c = ifelse(rowSums(RSEM_final_hope.gene[grep("cyano", names(RSEM_final_hope.gene))]) !=0,
"in_cyano_alone", "")
RSEM_final_hope.gene$whichOrg <- trimws(paste(a,b,c, sep = " "))
RSEM_final_hope.gene$whichTranscriptome <- ifelse(
grepl("TRINITY", RSEM_final_hope.gene$X), "chytrid", "cyano")
RSEM_final_hope.gene$whichOrg %>% head(20)
RSEM_final_hope.gene[8,]
table(RSEM_final_hope.gene$whichTranscriptome,
RSEM_final_hope.gene$whichOrg)
#            0  in_both_organisms in_both_organisms in_cyano_alone in_chytrid_alone
# chytrid  679               1764                              751              360
# cyano    629                  1                             3420                0
#
#         in_chytrid_alone  in_cyano_alone in_chytrid_alone in_both_organisms
# chytrid                                5                               1623
# cyano                                  2                                  0
#
#         in_chytrid_alone in_both_organisms in_cyano_alone in_cyano_alone
# chytrid                                               140             16
# cyano                                                 161            215
###################
## Define groups ##
###################
## Figure X ##
##### 1. rm contamination #####
# chytrid genes also found in when cyanobacteria is alone:
# chytrid + in_both_organisms in_cyano_alone
# chytrid + in_chytrid_alone  in_cyano_alone
# chytrid + in_chytrid_alone in_both_organisms in_cyano_alone
# chytrid + in_cyano_alone
write.csv(RSEM_final_hope.gene[
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid" & RSEM_final_hope.gene$whichOrg %in%
c("in_both_organisms in_cyano_alone",
"in_chytrid_alone  in_cyano_alone",
"in_chytrid_alone in_both_organisms in_cyano_alone",
"in_cyano_alone"),"X"],
"../../data/listOfTranscriptContaminant_toRmFromChytridTranscriptome", quote = F, row.names = F)
##### 2. preparation for DE analysis #####
# (c) chytrid genes expressed in chytrid alone and infecting
## Select only chytrid and both genes
RSEM_final_hope.gene_chytrid <- RSEM_final_hope.gene[RSEM_final_hope.gene$X %in% RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_chytrid_alone in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid","X"],]
## Select only chytrid and both samples
RSEM_final_hope.gene_chytrid =
RSEM_final_hope.gene_chytrid[grep("cyano", names(RSEM_final_hope.gene_chytrid),invert = T)]
## Clean
names(RSEM_final_hope.gene_chytrid)[1]=""
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[
!names(RSEM_final_hope.gene_chytrid) %in% c("whichOrg", "whichTranscriptome")]
## Investigate outliers (my function)
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1]))
## met_both_In11 and met_chy_Z10 outliers
RSEM_final_hope.gene_chytrid <-
RSEM_final_hope.gene_chytrid[!names(RSEM_final_hope.gene_chytrid) %in% c("met_chy_Z10", "met_both_In11")]
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1])) # good
# Z6 is a technical replicate of Z5
# Z12 is a technical replicate of Z7
# In6 is a technical replicate of In5
# In12 is a technical replicate of In11 --> no cluster by replicates, so these are sequencing differences
## Remove lowly expressed genes for robustness across experiments
# (the both experiments may have lower depth and not even detect these genes),
## At least gene exp non null in half of each group inf/not inf
RSEM_final_hope.gene_chytrid = RSEM_final_hope.gene_chytrid[
(rowSums(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("chy", names(RSEM_final_hope.gene_chytrid))])/2) &
(rowSums(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))]>0)>
ncol(RSEM_final_hope.gene_chytrid[grep("both", names(RSEM_final_hope.gene_chytrid))])/2),]
makeClusterWGCNA(t(RSEM_final_hope.gene_chytrid[-1])) # more homogeneous
write.table(RSEM_final_hope.gene_chytrid,
"../../data/run_DESEQ2_Erika/RSEM_final_hope.gene_chytrid_03122024.matrix",
sep="\t", quote = F, row.names = F)
rownames(RSEM_final_hope.gene_chytrid) <- RSEM_final_hope.gene_chytrid[[1]]
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[-1]
names(RSEM_final_hope.gene_chytrid)
nrow(RSEM_final_hope.gene_chytrid) # 1192
# (f) cyanobacteria genes expressed in cyano alone and infected --> give to Erika for DESEq2 3420 genes
## Select only cyano and both genes
RSEM_final_hope.gene_cyano <- RSEM_final_hope.gene[RSEM_final_hope.gene$X %in% RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms in_cyano_alone" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano","X"],]
## Select only cyano and both samples
RSEM_final_hope.gene_cyano =
RSEM_final_hope.gene_cyano[grep("chy", names(RSEM_final_hope.gene_cyano),invert = T)]
## Clean
names(RSEM_final_hope.gene_cyano)[1]=""
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("whichOrg", "whichTranscriptome")]
## Investigate outliers (my function)
makeClusterWGCNA(t(RSEM_final_hope.gene_cyano[-1]))
## no outliers!
## Remove lowly expressed genes for robustness across experiments
# (the both experiments may have lower depth and not even detect these genes),
## At least gene exp non null in half of each group inf/not inf
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
(rowSums(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("cyano", names(RSEM_final_hope.gene_cyano))])/2) &
(rowSums(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))]>0)>
ncol(RSEM_final_hope.gene_cyano[grep("both", names(RSEM_final_hope.gene_cyano))])/2),]
makeClusterWGCNA(t(RSEM_final_hope.gene_cyano[-1])) # more homogeneous
write.table(RSEM_final_hope.gene_cyano,
"../../data/run_DESEQ2_Erika/RSEM_final_hope.gene_cyano_03122024.matrix",
sep="\t", quote = F, row.names = F)
rownames(RSEM_final_hope.gene_cyano) <- RSEM_final_hope.gene_cyano[[1]]
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[-1]
names(RSEM_final_hope.gene_cyano)
nrow(RSEM_final_hope.gene_cyano) # 2166
##### 2. preparation for GO analysis #####
## Select only chytrid and both genes
# (a)
# 360 only zoospore transcripts
# in how many samples are they found (>half)
RSEM_final_hope.gene_a <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_chytrid_alone" &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid",]
## Select only chytrid samples
RSEM_final_hope.gene_a<- RSEM_final_hope.gene_a[
grep("chy", names(RSEM_final_hope.gene_a))]
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_a = RSEM_final_hope.gene_a[
(rowSums(RSEM_final_hope.gene_a[grep("control", names(RSEM_final_hope.gene_a))]>0)>
ncol(RSEM_final_hope.gene_a[grep("control", names(RSEM_final_hope.gene_a))])/2) &
(rowSums(RSEM_final_hope.gene_a[grep("met", names(RSEM_final_hope.gene_a))]>0)>
ncol(RSEM_final_hope.gene_a[grep("met", names(RSEM_final_hope.gene_a))])/2),]
## none remaining!
# (b)
# 1764 chytrid in_both_organisms --> virulence genes of chytrid!!! 10 filaments with TONS of infection
RSEM_final_hope.gene_b <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid",]
## Select only infection samples
RSEM_final_hope.gene_b <- RSEM_final_hope.gene_b[
grep("both", names(RSEM_final_hope.gene_b))]
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_b = RSEM_final_hope.gene_b[
(rowSums(RSEM_final_hope.gene_b[grep("control", names(RSEM_final_hope.gene_b))]>0)>
ncol(RSEM_final_hope.gene_b[grep("control", names(RSEM_final_hope.gene_b))])/2) &
(rowSums(RSEM_final_hope.gene_b[grep("met", names(RSEM_final_hope.gene_b))]>0)>
ncol(RSEM_final_hope.gene_b[grep("met", names(RSEM_final_hope.gene_b))])/2),]
## 3 remaining!
df = melt(RSEM_final_hope.gene_b[3,])
df$trt = ifelse(grepl("met", df$variable), "met", "control")
t.test(df$value[df$trt %in% "met"], df$value[df$trt %in% "control"])
## All three non significant effect of Met
matchChytridNameAnnot(RSEM_final_hope.gene[row.names(RSEM_final_hope.gene_b),"X"])
# RLR78_PLAVT" "4CLL8_ARATH" "MAK5_CRYNB"
# RLR78_PLAVT = code for the secreted RxLR effector protein 78, virulence factor identified in the Downy mildew of grapevine
# 4CLL8_ARATH = code for 4-coumarate--CoA ligase-like 8 Arabidopsis thaliana (Mouse-ear cress)
## Identification of a peroxisomal acyl-activating enzyme involved in the biosynthesis of jasmonic acid in Arabidopsis.
# (d)
# 215 --> cyano genes only expressed outside of infection?
## TO DO
# in how many samples are they found (>half)
# top expressed
# --> GO on these to find the big functions
# DEG MET/not MET --> does met affects the virulence?
RSEM_final_hope.gene_d <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_cyano_alone" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
## Select only cyano samples
RSEM_final_hope.gene_d <- RSEM_final_hope.gene_d[
grep("cyano", names(RSEM_final_hope.gene_d))]
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_d = RSEM_final_hope.gene_d[
(rowSums(RSEM_final_hope.gene_d[grep("control", names(RSEM_final_hope.gene_d))]>0)>
ncol(RSEM_final_hope.gene_d[grep("control", names(RSEM_final_hope.gene_d))])/2) &
(rowSums(RSEM_final_hope.gene_d[grep("met", names(RSEM_final_hope.gene_d))]>0)>
ncol(RSEM_final_hope.gene_d[grep("met", names(RSEM_final_hope.gene_d))])/2),]
nrow(RSEM_final_hope.gene_d) # 124 remaining!!
# GO on those TBC
# (e)
## one gene cyano only expressed during infection
RSEM_final_hope.gene_e <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% "in_both_organisms" &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano",]
## Select only cyano samples
RSEM_final_hope.gene_e <- RSEM_final_hope.gene_e[
grep("both", names(RSEM_final_hope.gene_e))]
matchCyanoNameAnnot(RSEM_final_hope.gene[rownames(RSEM_final_hope.gene_e),"X"])
# "gas vesicle protein"
## At least gene exp non null in half of each group met/not met
RSEM_final_hope.gene_e[
(rowSums(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("control", names(RSEM_final_hope.gene_e))])/2) &
(rowSums(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))]>0)>
ncol(RSEM_final_hope.gene_e[grep("met", names(RSEM_final_hope.gene_e))])/2),]
RSEM_final_hope.gene_e
