read.csv("Downloads/RSME_final_hope.gene_cyano.matrix")
test = read.csv("Downloads/RSME_final_hope.gene_cyano.matrix")
test = read.csv("Downloads/RSME_final_hope.gene_cyano.matrix", sep="\t")
head(test)
load("Downloads/DESeq2Results_6comp_final_hope_021224.Rdata")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")load("Downloads/DESeq2Results_6comp_final_hope_021224.Rdata")
BiocManager::install("DESeq2")load("Downloads/DESeq2Results_6comp_final_hope_021224.Rdata")
BiocManager::install("DESeq2")
load("Downloads/DESeq2Results_6comp_final_hope_021224.Rdata")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
read.table("Downloads/resource_usage.04811171.log")
read.csv("Downloads/resource_usage.04811171.log")
res <- read.csv("Downloads/resource_usage.04811171.log")
res <- read.csv("Downloads/resource_usage.04811171.log", sep = "\t")
res <- read.csv("Downloads/resource_usage.04811171.log", sep = ",")
View(res)
res <- read.csv("Downloads/resource_usage.04811171.log", skip = 8)
res <- read.csv("Downloads/resource_usage.04811171.log", skip = 8, sep = "|")
res <- read.csv("Downloads/resource_usage.04811171.log", skip = 8)
View(res)
read.table("Downloads/resource_usage.04811171.log", skip = 8)
read.csv("Downloads/resource_usage.04811171.log", skip = 8)
read.csv("Downloads/resource_usage.04811171.log", skip = 8, sep = " | ")
read.csv("Downloads/resource_usage.04811171.log", skip = 8, sep = "|", header = FALSE, strip.white = TRUE)
res <- read.csv("Downloads/resource_usage.04811171.log", skip = 8, sep = "|", header = FALSE, strip.white = TRUE)
View(res)
res <- read.csv("Downloads/resource_usage.04811171.log", skip = 8, sep = "|", strip.white = TRUE)
res <- read.csv("Downloads/resource_usage.04811171.log", skip = 8, sep = "|",
header = T, strip.white = TRUE)
res <- read.csv("Downloads/resource_usage.04811171.log", skip = 8, sep = "|",
header = F, strip.white = TRUE)
View(res)
res <- res[-1,]
View(res)
library(ggplot2)
ggplot(res, aes(x=V3, y=V2)) + geom_point()
ggplot(res, aes(x=V1, y=V2)) + geom_point()
ggplot(res, aes(x=V1, y=V2)) + geom_line()
ggplot(res, aes(x=V1, y=V2)) + geom_smooth()
ggplot(res, aes(x=V1, y=V2)) + geom_point()
ggplot(res, aes(x=V1, y=V3)) + geom_point()
View(res)
names(res)
names(res) <- c("Timestamp", "%CPU", "Memory_GB")
ggplot(res, aes(x=Timestamp, y=%CPU)) + geom_point()
names(res) <- c("Timestamp", "%CPU", "Memory_GB")
library(ggplot2)
ggplot(res, aes(x=Timestamp, y=%CPU)) + geom_point()
ggplot(res, aes(x=Timestamp, y='%CPU')) + geom_point()
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point()
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 1700)
17*6
ggplot(res, aes(x=Timestamp, y=Memory_GB)) + geom_point()
ggplot(res, aes(x=Timestamp, y=Memory_GB)) + geom_point()+
geom_hline(yintercept = 102)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 1700)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 1700)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 600)
head(res)
View(res)
View(res)
names(res) <- c("Timestamp", "%CPU", "Memory_GB")
head(res)
View(res)
library(ggplot2)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 600)
ggplot(res, aes(x=Timestamp, y=Memory_GB)) + geom_point()+
geom_hline(yintercept = 102)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 600)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 600*2)
ggplot(res, aes(x=Timestamp, y=Memory_GB)) + geom_point()+
geom_hline(yintercept = 102*2)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 600*2)
ggplot(res, aes(x=Timestamp, y=Memory_GB)) + geom_point()+
geom_hline(yintercept = 102*2)
ggplot(res, aes(x=Timestamp, y=Memory_GB)) + geom_point()+
geom_hline(yintercept = 102)
ggplot(res, aes(x=Timestamp, y=`%CPU`)) + geom_point() +
geom_hline(yintercept = 600)
setwd("Documents/GIT/2024_cyanochytridMET/scripts/Part2_DEG/")
## 29th of November 2024
source("libLoad.R")
source("dataLoad.R")
## Let's observe the count matrix calculated by Trinity
RSEM_final_hope.gene <-
read.csv("../../data/run_DESEQ2_Erika/RSEM_final_hope.gene.counts.matrix", sep="\t")
rownames(RSEM_final_hope.gene)=RSEM_final_hope.gene$X
## 9766 genes
#######################################################################
## Split by group depending on which gene is expressed in which case ##
#######################################################################
a = ifelse(rowSums(RSEM_final_hope.gene[grep("chy", names(RSEM_final_hope.gene))]) !=0,
"in_chytrid_alone", "")
b = ifelse(rowSums(RSEM_final_hope.gene[grep("both", names(RSEM_final_hope.gene))]) !=0,
"in_both_organisms", "")
c = ifelse(rowSums(RSEM_final_hope.gene[grep("cyano", names(RSEM_final_hope.gene))]) !=0,
"in_cyano_alone", "")
RSEM_final_hope.gene$whichOrg <- trimws(paste(a,b,c, sep = " "))
RSEM_final_hope.gene$whichTranscriptome <- ifelse(
grepl("TRINITY", RSEM_final_hope.gene$X), "chytrid", "cyano")
table(RSEM_final_hope.gene$whichTranscriptome,
RSEM_final_hope.gene$whichOrg)
#            0  in_both_organisms in_both_organisms in_cyano_alone in_chytrid_alone
# chytrid  679               1764                              751              360
# cyano    629                  1                             3420                0
#
#         in_chytrid_alone  in_cyano_alone in_chytrid_alone in_both_organisms
# chytrid                                5                               1623
# cyano                                  2                                  0
#
#         in_chytrid_alone in_both_organisms in_cyano_alone in_cyano_alone
# chytrid                                               140             16
# cyano                                                 161            215
## Figure X ##
##### 1. rm contamination in my chytrid assembly #####
# chytrid genes also found in when cyanobacteria is alone:
# chytrid + in_both_organisms in_cyano_alone
# chytrid + in_chytrid_alone  in_cyano_alone
# chytrid + in_chytrid_alone in_both_organisms in_cyano_alone
# chytrid + in_cyano_alone
listOfTranscriptContaminant_toRmFromChytridTranscriptome <-
RSEM_final_hope.gene[
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid" & RSEM_final_hope.gene$whichOrg %in%
c("in_both_organisms in_cyano_alone",
"in_chytrid_alone  in_cyano_alone",
"in_chytrid_alone in_both_organisms in_cyano_alone",
"in_cyano_alone"),"X"]
write.csv(listOfTranscriptContaminant_toRmFromChytridTranscriptome,
"../../data/listOfTranscriptContaminant_toRmFromChytridTranscriptome", quote = F, row.names = F)
#### 2. Which genes have been sequenced for chytrid and cyano (and are not contamination)?
#############
## Chytrid ##
sequencedChytridGenes <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% c("in_chytrid_alone in_both_organisms",
"in_chytrid_alone", "in_both_organisms") &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid","X"]
length(sequencedChytridGenes) # 3747 sequenced genes
## Select only "chytrid and both" genes
# 3747 genes investigated
RSEM_final_hope.gene_chytrid <- RSEM_final_hope.gene[
RSEM_final_hope.gene$X %in% sequencedChytridGenes,]
## Select only "chytrid and both" samples
RSEM_final_hope.gene_chytrid = RSEM_final_hope.gene_chytrid[
grep("cyano", names(RSEM_final_hope.gene_chytrid),invert = T)]
## Clean
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[
!names(RSEM_final_hope.gene_chytrid) %in% c("X", "whichOrg", "whichTranscriptome")]
## Rename based on annotations
rownames(RSEM_final_hope.gene_chytrid) = make.unique(annotationChytrid$gene_name[
match(row.names(RSEM_final_hope.gene_chytrid), annotationChytrid$custom_gene_name)])
nrow(RSEM_final_hope.gene_chytrid) # 3747
## Merge identical proteins in only one row, suming the counts
RSEM_final_hope.gene_chytrid = RSEM_final_hope.gene_chytrid %>%
mutate(base_name = sub("\\.\\d+$", "", rownames(RSEM_final_hope.gene_chytrid))) %>%
group_by(base_name) %>%
summarise(across(everything(), sum)) %>%
tibble::column_to_rownames("base_name") %>% data.frame()
nrow(RSEM_final_hope.gene_chytrid) # 3156 genes
# 3747 - 3156 = 591 genes that had multiple transcript names
###################
## Cyanobacteria ##
sequencedCyanoGenes <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% c("in_both_organisms in_cyano_alone",
"in_cyano_alone", "in_both_organisms") &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano","X"]
length(sequencedCyanoGenes) # 3636 sequenced genes
## Select only "cyano and both" genes
RSEM_final_hope.gene_cyano <- RSEM_final_hope.gene[
RSEM_final_hope.gene$X %in% sequencedCyanoGenes,]
## Select only "cyano and both" samples
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
grep("chy", names(RSEM_final_hope.gene_cyano),invert = T)]
## Clean
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("X", "whichOrg", "whichTranscriptome")]
## Rename based on annotations
rownames(RSEM_final_hope.gene_cyano) = make.unique(annotationCyano$gene_name[
match(row.names(RSEM_final_hope.gene_cyano), annotationCyano$custom_gene_name)])
nrow(RSEM_final_hope.gene_cyano) # 3636 genes
## Merge identical proteins in only one row, suming the counts
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano %>%
mutate(base_name = sub("\\.\\d+$", "", rownames(RSEM_final_hope.gene_cyano))) %>%
group_by(base_name) %>%
summarise(across(everything(), sum)) %>%
tibble::column_to_rownames("base_name") %>% data.frame()
nrow(RSEM_final_hope.gene_cyano) # 3589 genes
# 3636-3589=47 genes with duplicated counts
###################################
## Low quality genes filtering ##
###################################
# To determine if a sample has been sufficiently sequenced, a saturation curve
# can be generated with software like vegan in R
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
## BiocManager::install("NOISeq")
library(NOISeq)
# Sequencing depth & Expression Quantification
# The plots in this section can be generated by only providing the expression data, since no other biological
# information is required. Their purpose is to assess if the sequencing depth of the samples is enough to detect the
# features of interest and to get a good quantification of their expression.
# Saturation plot
# The “Saturation" plot shows the number of features in the genome detected with more than k counts with
# the sequencing depth of the sample, and with higher and lower simulated sequencing depth
# Create an ExpressionSet object
counts_chy <- as.matrix(RSEM_final_hope.gene_chytrid)
eset_chy <- ExpressionSet(assayData = counts_chy)
mysaturation_chy = dat(eset_chy, k = 0, ndepth = 7, type = "saturation")
## Chytrid alone:
explo.plot(mysaturation_chy, toplot = 1, samples = 1:11)
## Both organisms:
explo.plot(mysaturation_chy, toplot = 1, samples = 12:19)
counts_cyano <- as.matrix(RSEM_final_hope.gene_cyano)
eset_cyano <- ExpressionSet(assayData = counts_cyano)
mysaturation_cyano = dat(eset_cyano, k = 0, ndepth = 7, type = "saturation")
## Both organisms:
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:8)
## Cyano alone
explo.plot(mysaturation_cyano, toplot = 1, samples = 9:20)
## Due to the discrepancies between the groups, we remove genes with
## zeros in at least 3/group (met+inf)
RSEM_final_hope.gene_chytrid <- filterRSEMno3Nullpergp(RSEM_final_hope.gene_chytrid)
RSEM_final_hope.gene_cyano <- filterRSEMno3Nullpergp(RSEM_final_hope.gene_cyano)
## check saturation
counts_chy <- as.matrix(RSEM_final_hope.gene_chytrid)
eset_chy <- ExpressionSet(assayData = counts_chy)
mysaturation_chy = dat(eset_chy, k = 0, ndepth = 7, type = "saturation")
ncol(RSEM_final_hope.gene_chytrid)
## all
explo.plot(mysaturation_chy, toplot = 1, samples = 1:19)
## 86.9 to 100% genes detected
counts_cyano <- as.matrix(RSEM_final_hope.gene_cyano)
eset_cyano <- ExpressionSet(assayData = counts_cyano)
mysaturation_cyano = dat(eset_cyano, k = 0, ndepth = 7, type = "saturation")
names(RSEM_final_hope.gene_cyano)
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:20)
## Both organisms:
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:9)
## Cyano alone
explo.plot(mysaturation_cyano, toplot = 1, samples = 10:20)
## meth_both_In11 58.9% everything else 92.5 to 100%
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("met_both_In11")]
nrow(RSEM_final_hope.gene_chytrid) # 835
names(RSEM_final_hope.gene_chytrid)
nrow(RSEM_final_hope.gene_cyano) # 555
names(RSEM_final_hope.gene_cyano)
## I. Chytrid transcripts
contrast_chytridgenome<- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_chytrid,
my_org="chy")
## II. Cyano transcripts
contrast_cyanogenome <- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_cyano,
my_org="cyano")
## Volcano plots
V_chytrid_inf_effect_control <- makeVolcano(
res = contrast_chytridgenome$resr_inf_effect_control,
title = "Infection effect on chytrid gene expression",
subtitle = "absence of metolachlor")
V_chytrid_inf_effect_met <- makeVolcano(
res = contrast_chytridgenome$resr_inf_effect_met,
title = "Infection effect on chytrid gene expression",
subtitle = "presence of metolachlor")
V_chytrid_met_effect_1org <- makeVolcano(
res = contrast_chytridgenome$resr_met_effect_1org,
title = "Metolachlor effect on chytrid gene expression",
subtitle = "free-living zoospores")
V_chytrid_met_effect_2orgs <- makeVolcano(
res = contrast_chytridgenome$resr_met_effect_2orgs,
title = "Metolachlor effect on chytrid gene expression",
subtitle = "during infection")
V_cyano_inf_effect_control <- makeVolcano(
res = contrast_cyanogenome$resr_inf_effect_control,
title = "Infection effect on cyanobacteria gene expression",
subtitle = "absence of metolachlor")
V_cyano_inf_effect_met <- makeVolcano(
res = contrast_cyanogenome$resr_inf_effect_met,
title = "Infection effect on cyanobacteria gene expression",
subtitle = "presence of metolachlor")
V_cyano_met_effect_1org <- makeVolcano(
res = contrast_cyanogenome$resr_met_effect_1org,
title = "Metolachlor effect on cyanobacteria gene expression",
subtitle = "uninfected cyanobacteria")
V_cyano_met_effect_2orgs <- makeVolcano(
res = contrast_cyanogenome$resr_met_effect_2orgs,
title = "Metolachlor effect on cyanobacteria gene expression",
subtitle = "infected cyanobacteria")
## Venn diagrams
# devtools::install_github("yanlinlin82/ggvenn")
library(ggvenn)
## Select differentially expressed genes in each comparison
getGenes <- function(x) {rownames(x[x$padj < 0.05 & !is.na(x$padj),])}
# Combine the lists into a named list for the Venn diagram
venn_data <- list("infection effect chytrid - control"=
getGenes(contrast_chytridgenome$resr_inf_effect_control),
"met effect chytrid - free living"=
getGenes(contrast_chytridgenome$resr_met_effect_1org),
"met effect chytrid - infecting"=
getGenes(contrast_chytridgenome$resr_met_effect_2orgs),
"infection effect chytrid - met"=
getGenes(contrast_chytridgenome$resr_inf_effect_met))
ggvenn(
venn_data, show_percentage = F, fill_color = rep("white", 4),
stroke_size = 0.5, set_name_size = 4
)
# Combine the lists into a named list for the Venn diagram
venn_data <- list("infection effect cyano - control"=
getGenes(contrast_cyanogenome$resr_inf_effect_control),
"met effect cyano - alone"=
getGenes(contrast_cyanogenome$resr_met_effect_1org),
"met effect cyano - infected"=
getGenes(contrast_cyanogenome$resr_met_effect_2orgs),
"infection effect cyano - met"=
getGenes(contrast_cyanogenome$resr_inf_effect_met))
ggvenn(
venn_data, show_percentage = F, fill_color = rep("white", 4),
stroke_size = 0.5, set_name_size = 4
)
## Heatmaps
contrast_cyanogenome
## Save results in tables
selectDEGenes <- function(x) {x[x$padj < 0.05 & !is.na(x$padj),]}
## 1. chytrid
contrast_chytridgenome_DEG <- lapply(contrast_chytridgenome[1:4], selectDEGenes)
x <- list()
for (i in 1:4) {
if (nrow(contrast_chytridgenome_DEG[[i]]) > 0) {  # Check if the data frame is not empty
x[[i]] <- data.frame(
geneName = rownames(contrast_chytridgenome_DEG[[i]]),
padj = contrast_chytridgenome_DEG[[i]]$padj,
log2FoldChange = contrast_chytridgenome_DEG[[i]]$log2FoldChange
)
x[[i]]$comparison <- names(contrast_chytridgenome_DEG)[i]
} else {
x[[i]] <- data.frame()  # Create an empty data frame if no rows are present
}
}
contrast_chytridgenome_DEG <- do.call(rbind, x)
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_inf_effect_control"] <-
"Infection effect on chytrid gene expression, in the absence of MET"
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_inf_effect_met"] <-
"Infection effect on chytrid gene expression, in the presence of MET "
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_met_effect_1org"] <-
"MET effect on chytrid gene expression, in free-living chytrid zoospores"
contrast_chytridgenome_DEG$comparison[
contrast_chytridgenome_DEG$comparison %in% "resr_met_effect_2orgs"] <-
"MET effect on chytrid gene expression, in infecting chytrid"
table(contrast_chytridgenome_DEG$comparison)
## 2. cyanobacteria
contrast_cyanogenome_DEG <- lapply(contrast_cyanogenome[1:4], selectDEGenes)
x <- list()
for (i in 1:4) {
if (nrow(contrast_cyanogenome_DEG[[i]]) > 0) {  # Check if the data frame is not empty
x[[i]] <- data.frame(
geneName = rownames(contrast_cyanogenome_DEG[[i]]),
padj = contrast_cyanogenome_DEG[[i]]$padj,
log2FoldChange = contrast_cyanogenome_DEG[[i]]$log2FoldChange
)
x[[i]]$comparison <- names(contrast_cyanogenome_DEG)[i]
} else {
x[[i]] <- data.frame()  # Create an empty data frame if no rows are present
}
}
contrast_cyanogenome_DEG <- do.call(rbind, x)
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_inf_effect_control"] <-
"Infection effect on cyanobacteria gene expression, in the absence of MET"
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_inf_effect_met"] <-
"Infection effect on cyanobacteria gene expression, in the presence of MET "
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_met_effect_1org"] <-
"MET effect on cyanobacteria gene expression, in uninfected cyanobacteria"
contrast_cyanogenome_DEG$comparison[
contrast_cyanogenome_DEG$comparison %in% "resr_met_effect_2orgs"] <-
"MET effect on cyanobacteria gene expression, in infected bacteria"
table(contrast_cyanogenome_DEG$comparison)
fullDEGTable <- rbind(contrast_chytridgenome_DEG, contrast_cyanogenome_DEG)
fullDEGTable$padj <- signif(fullDEGTable$padj, 2)
fullDEGTable$log2FoldChange <- signif(fullDEGTable$log2FoldChange, 2)
write.csv(fullDEGTable, "../../figures/TableS1_fullDEGTable.tsv", row.names = F)
contrast_chytridgenome_DEG
contrast_chytridgenome_DEG$geneName
## Heatmaps
RSEM_final_hope.gene_chytrid
## Heatmaps
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% contrast_chytridgenome_DEG$geneName,]
#####################
## Heatmaps of DEG ##
RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% contrast_chytridgenome_DEG$geneName,]
heatmap(RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% contrast_chytridgenome_DEG$geneName,])
heatmap(as.matrix(RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% contrast_chytridgenome_DEG$geneName,])
heatmap(as.matrix(RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% contrast_chytridgenome_DEG$geneName,]))
heatmap(as.matrix(RSEM_final_hope.gene_chytrid[rownames(RSEM_final_hope.gene_chytrid) %in% contrast_chytridgenome_DEG$geneName,]))
contrast_chytridgenome_DEG$comparison
contrast_chytridgenome_DEG
contrast_chytridgenome_DEG$comparison
contrast_chytridgenome_DEG$comparison %in% "MET effect on chytrid gene expression, in free-living chytrid zoospores"
#####################
## Heatmaps of DEG ##
unique(contrast_chytridgenome_DEG$comparison)
#####################
## Heatmaps of DEG ##
c1 <- unique(contrast_chytridgenome_DEG$comparison)
heatmap(as.matrix(RSEM_final_hope.gene_chytrid[
rownames(RSEM_final_hope.gene_chytrid) %in% contrast_chytridgenome_DEG$geneName[
contrast_chytridgenome_DEG$comparison %in% c1[1]] ,]))
