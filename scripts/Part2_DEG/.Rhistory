textMatrix
moduleTraitCor
datTraits
moduleColors
moduleLabels
table(CICA_EMENI)
table(moduleLabels
)
moduleColors
consMEs
## In which modules are DEG?
moduleLabels
## In which modules are DEG?
data.frame(moduleLabels, moduleColors)
moduleLabels
rownames(moduleLabels)
names(moduleLabels)
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]
moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"],]
moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]]
x = moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on chytrid gene expression", fullDEGTable$comparison), "geneName"]]
x > 0
x[x > 0]
datExpr = t(contrast_cyanogenome$vstr)
contrast_chytridgenome$vstr
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH")]
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),]
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
pivot_longer()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_wider()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_wider(name = "name")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)%>%
ggplot()
df_long <- contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
colnames(df_long)[1] <- "genes"
df_long
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes") %>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes") %>%
pivot_longer(
cols = everything(-genes),
names_to = "sample"
values_to = "value"
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame()%>% rownames_to_column("genes") %>%
pivot_longer(
cols = everything(-genes),
names_to = "sample",
values_to = "value"
)
# Define the matrix
matrix_data <- matrix(
c(6.298574, 9.36423, 10.083060, 7.092527, 6.463589, 6.362593, 4.870600,
7.090636, 11.33752, 7.458241, 6.074389, 7.487103, 8.404041, 5.785601),
nrow = 2,
dimnames = list(c("ILVB_CRYNH", "RS15A_BOVIN"),
c("control_both_In2", "control_both_In3", "control_both_In5",
"control_chy_Z1", "control_chy_Z2", "control_chy_Z3", "control_chy_Z4"))
)
# Convert matrix to dataframe and preserve rownames as "genes"
df <- as.data.frame(matrix_data) %>%
rownames_to_column("genes")
# Use pivot_longer to reshape the dataframe
df_long <- df %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
)
# View the resulting dataframe
print(df_long)
df
as.data.frame(matrix_data)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes")
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes")%>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
)
as.data.frame(matrix_data) %>%
rownames_to_column("genes")
as.data.frame(matrix_data) %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = everything(),
names_to = "sample",
values_to = "value"
)
as.data.frame(matrix_data) %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
)
as.data.frame(matrix_data) %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
)
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
) %>% ggplot(aes(x=ILVB_CRYNH, y=RS15A_BOVIN))
contrast_chytridgenome$vstr[rownames(contrast_chytridgenome$vstr) %in% c("RS15A_BOVIN", "ILVB_CRYNH"),] %>%
data.frame() %>%
rownames_to_column("genes") %>%
pivot_longer(
cols = -genes,
names_to = "sample",
values_to = "value"
) %>%
pivot_wider(
id_cols = sample,
names_from = genes,
values_from = value
) %>% ggplot(aes(x=ILVB_CRYNH, y=RS15A_BOVIN)) + geom_point()
datExpr = t(contrast_cyanogenome$vstr)
## load species specific consMEs, moduleLabels, moduleColors, consTree
load("../../data/Network_cyano.RData")
# Get data traits
datTraits0 <- data.frame(sample_id = rownames(datExpr))
# Split the sample_id column into three new columns
datTraits <- data.frame(do.call(rbind, strsplit(as.character(datTraits0$sample_id), "_")))
# Rename the columns for clarity
colnames(datTraits) <- c("MetTrt", "InfTrt", "ID")
datTraits = datTraits[-3]
# Combine the original data with the split data
rownames(datTraits)=datTraits0$sample_id
datTraits$MetTrt <- as.numeric(as.factor(datTraits$MetTrt))
datTraits$InfTrt <- as.numeric(as.factor(datTraits$InfTrt))
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# Define variable weight containing the InfTrt column of datTrait
InfTrt = as.data.frame(datTraits$InfTrt);
names(InfTrt) = "InfTrt"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, InfTrt, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(InfTrt), sep="");
names(GSPvalue) = paste("p.GS.", names(InfTrt), sep="");
module = "turquoise"
column = match(module, modNames);
moduleGenes = moduleColors==module;
sizeGrWindow(7, 7);
par(mfrow = c(1,1));
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for InfTrt",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
## GO on these: nothing
getGOBubbleZ(universe = universe_chytrid, annotation = annotationChytrid,
genelist = colnames(datExpr)[moduleColors=="turquoise"],
GO_df = GO_chytrid, isbubble = F)
#############################################################################################
## In which modules are DEG?
data.frame(moduleLabels, moduleColors) # 1 is turquoise, 2 blue
#############################################################################################
## In which modules are DEG?
table(moduleColors)
data.frame(moduleLabels, moduleColors) # 1 is turquoise, 2 blue, 3 brown
x = moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on cyano gene expression", fullDEGTable$comparison), "geneName"]]
x
x = moduleLabels[
names(moduleLabels)%in% fullDEGTable[grep("on cyanobacteria gene expression", fullDEGTable$comparison), "geneName"]]
x[x > 0]
?EnhancedVolcano::EnhancedVolcano()
## 29th of November 2024
source("libLoad.R")
source("dataLoad.R")
## Let's observe the count matrix calculated by Trinity
RSEM_final_hope.gene <-
read.csv("../../data/run_DESEQ2_Erika/RSEM_final_hope.gene.counts.matrix", sep="\t")
rownames(RSEM_final_hope.gene)=RSEM_final_hope.gene$X
#######################################################################
## Split by group depending on which gene is expressed in which case ##
#######################################################################
a = ifelse(rowSums(RSEM_final_hope.gene[grep("chy", names(RSEM_final_hope.gene))]) !=0,
"in_chytrid_alone", "")
b = ifelse(rowSums(RSEM_final_hope.gene[grep("both", names(RSEM_final_hope.gene))]) !=0,
"in_both_organisms", "")
c = ifelse(rowSums(RSEM_final_hope.gene[grep("cyano", names(RSEM_final_hope.gene))]) !=0,
"in_cyano_alone", "")
RSEM_final_hope.gene$whichOrg <- trimws(paste(a,b,c, sep = " "))
RSEM_final_hope.gene$whichTranscriptome <- ifelse(
grepl("TRINITY", RSEM_final_hope.gene$X), "chytrid", "cyano")
table(RSEM_final_hope.gene$whichTranscriptome,
RSEM_final_hope.gene$whichOrg)
listOfTranscriptContaminant_toRmFromChytridTranscriptome <-
RSEM_final_hope.gene[
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid" & RSEM_final_hope.gene$whichOrg %in%
c("in_both_organisms in_cyano_alone",
"in_chytrid_alone  in_cyano_alone",
"in_chytrid_alone in_both_organisms in_cyano_alone",
"in_cyano_alone"),"X"]
write.csv(listOfTranscriptContaminant_toRmFromChytridTranscriptome,
"../../data/listOfTranscriptContaminant_toRmFromChytridTranscriptome", quote = F, row.names = F)
#### 2. Which genes have been sequenced for chytrid and cyano (and are not contamination)?
#############
## Chytrid ##
sequencedChytridGenes <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% c("in_chytrid_alone in_both_organisms",
"in_chytrid_alone", "in_both_organisms") &
RSEM_final_hope.gene$whichTranscriptome %in% "chytrid","X"]
length(sequencedChytridGenes) # 3747 sequenced genes
## Select only "chytrid and both" genes
# 3747 genes investigated
RSEM_final_hope.gene_chytrid <- RSEM_final_hope.gene[
RSEM_final_hope.gene$X %in% sequencedChytridGenes,]
## Select only "chytrid and both" samples
RSEM_final_hope.gene_chytrid = RSEM_final_hope.gene_chytrid[
grep("cyano", names(RSEM_final_hope.gene_chytrid),invert = T)]
## Clean
RSEM_final_hope.gene_chytrid=RSEM_final_hope.gene_chytrid[
!names(RSEM_final_hope.gene_chytrid) %in% c("X", "whichOrg", "whichTranscriptome")]
## Rename based on annotations
rownames(RSEM_final_hope.gene_chytrid) = make.unique(annotationChytrid$gene_name[
match(row.names(RSEM_final_hope.gene_chytrid), annotationChytrid$custom_gene_name)])
nrow(RSEM_final_hope.gene_chytrid) # 3747
## Merge identical proteins in only one row, suming the counts
RSEM_final_hope.gene_chytrid = RSEM_final_hope.gene_chytrid %>%
mutate(base_name = sub("\\.\\d+$", "", rownames(RSEM_final_hope.gene_chytrid))) %>%
group_by(base_name) %>%
summarise(across(everything(), sum)) %>%
tibble::column_to_rownames("base_name") %>% data.frame()
nrow(RSEM_final_hope.gene_chytrid) # 3156 genes
###################
## Cyanobacteria ##
sequencedCyanoGenes <- RSEM_final_hope.gene[
RSEM_final_hope.gene$whichOrg %in% c("in_both_organisms in_cyano_alone",
"in_cyano_alone", "in_both_organisms") &
RSEM_final_hope.gene$whichTranscriptome %in% "cyano","X"]
length(sequencedCyanoGenes) # 3636 sequenced genes
## Select only "cyano and both" genes
RSEM_final_hope.gene_cyano <- RSEM_final_hope.gene[
RSEM_final_hope.gene$X %in% sequencedCyanoGenes,]
## Select only "cyano and both" samples
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
grep("chy", names(RSEM_final_hope.gene_cyano),invert = T)]
## Clean
RSEM_final_hope.gene_cyano=RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("X", "whichOrg", "whichTranscriptome")]
## Rename based on annotations
rownames(RSEM_final_hope.gene_cyano) = make.unique(annotationCyano$gene_name[
match(row.names(RSEM_final_hope.gene_cyano), annotationCyano$custom_gene_name)])
nrow(RSEM_final_hope.gene_cyano) # 3636 genes
## Merge identical proteins in only one row, suming the counts
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano %>%
mutate(base_name = sub("\\.\\d+$", "", rownames(RSEM_final_hope.gene_cyano))) %>%
group_by(base_name) %>%
summarise(across(everything(), sum)) %>%
tibble::column_to_rownames("base_name") %>% data.frame()
nrow(RSEM_final_hope.gene_cyano) # 3589 genes
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
## BiocManager::install("NOISeq")
library(NOISeq)
# Saturation plot
# The “Saturation" plot shows the number of features in the genome detected with more than k counts with
# the sequencing depth of the sample, and with higher and lower simulated sequencing depth
# Create an ExpressionSet object
counts_chy <- as.matrix(RSEM_final_hope.gene_chytrid)
eset_chy <- ExpressionSet(assayData = counts_chy)
mysaturation_chy = dat(eset_chy, k = 0, ndepth = 7, type = "saturation")
## Chytrid alone:
explo.plot(mysaturation_chy, toplot = 1, samples = 1:11)
## Both organisms:
explo.plot(mysaturation_chy, toplot = 1, samples = 12:19)
counts_cyano <- as.matrix(RSEM_final_hope.gene_cyano)
eset_cyano <- ExpressionSet(assayData = counts_cyano)
mysaturation_cyano = dat(eset_cyano, k = 0, ndepth = 7, type = "saturation")
## Both organisms:
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:8)
## Cyano alone
explo.plot(mysaturation_cyano, toplot = 1, samples = 9:20)
## Due to the discrepancies between the groups, we remove genes with
## zeros in at least 3/group (met+inf)
RSEM_final_hope.gene_chytrid <- filterRSEMno3Nullpergp(RSEM_final_hope.gene_chytrid)
RSEM_final_hope.gene_cyano <- filterRSEMno3Nullpergp(RSEM_final_hope.gene_cyano)
## check saturation
counts_chy <- as.matrix(RSEM_final_hope.gene_chytrid)
eset_chy <- ExpressionSet(assayData = counts_chy)
mysaturation_chy = dat(eset_chy, k = 0, ndepth = 7, type = "saturation")
ncol(RSEM_final_hope.gene_chytrid)
## all
explo.plot(mysaturation_chy, toplot = 1, samples = 1:19)
counts_cyano <- as.matrix(RSEM_final_hope.gene_cyano)
eset_cyano <- ExpressionSet(assayData = counts_cyano)
mysaturation_cyano = dat(eset_cyano, k = 0, ndepth = 7, type = "saturation")
names(RSEM_final_hope.gene_cyano)
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:20)
## Both organisms:
explo.plot(mysaturation_cyano, toplot = 1, samples = 1:9)
## Cyano alone
explo.plot(mysaturation_cyano, toplot = 1, samples = 10:20)
RSEM_final_hope.gene_cyano = RSEM_final_hope.gene_cyano[
!names(RSEM_final_hope.gene_cyano) %in% c("met_both_In11")]
nrow(RSEM_final_hope.gene_chytrid) # 835
names(RSEM_final_hope.gene_chytrid)
nrow(RSEM_final_hope.gene_cyano) # 555
names(RSEM_final_hope.gene_cyano)
## I. Chytrid transcripts
contrast_chytridgenome<- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_chytrid,
my_org="chy")
## II. Cyano transcripts
contrast_cyanogenome <- calculateContrasts(
my_countsmatrix=RSEM_final_hope.gene_cyano,
my_org="cyano")
## Volcano plots
V_chytrid_inf_effect_control <- makeVolcano(
res = contrast_chytridgenome$resr_inf_effect_control,
title = "Infection effect on chytrid gene expression",
subtitle = "absence of metolachlor")
V_chytrid_inf_effect_met <- makeVolcano(
res = contrast_chytridgenome$resr_inf_effect_met,
title = "Infection effect on chytrid gene expression",
subtitle = "presence of metolachlor")
V_chytrid_met_effect_1org <- makeVolcano(
res = contrast_chytridgenome$resr_met_effect_1org,
title = "Metolachlor effect on chytrid gene expression",
subtitle = "free-living zoospores")
V_chytrid_met_effect_2orgs <- makeVolcano(
res = contrast_chytridgenome$resr_met_effect_2orgs,
title = "Metolachlor effect on chytrid gene expression",
subtitle = "during infection")
V_cyano_inf_effect_control <- makeVolcano(
res = contrast_cyanogenome$resr_inf_effect_control,
title = "Infection effect on cyanobacteria gene expression",
subtitle = "absence of metolachlor")
V_cyano_inf_effect_met <- makeVolcano(
res = contrast_cyanogenome$resr_inf_effect_met,
title = "Infection effect on cyanobacteria gene expression",
subtitle = "presence of metolachlor")
V_cyano_met_effect_1org <- makeVolcano(
res = contrast_cyanogenome$resr_met_effect_1org,
title = "Metolachlor effect on cyanobacteria gene expression",
subtitle = "uninfected cyanobacteria")
V_cyano_met_effect_2orgs <- makeVolcano(
res = contrast_cyanogenome$resr_met_effect_2orgs,
title = "Metolachlor effect on cyanobacteria gene expression",
subtitle = "infected cyanobacteria")
## open bigger window
dev.new(width = 15, height = 12)
pdf("../../figures/Fig3_chytrid_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_chytrid_inf_effect_control$plot,
V_chytrid_inf_effect_met$plot,
V_chytrid_met_effect_1org$plot,
V_chytrid_met_effect_2orgs$plot,
labels = c("a", "b", "c", "d"), label_size = 20)
dev.off()
dev.new(width = 15, height = 12)
pdf("../../figures/Fig4_cyano_volc.pdf", width = 15, height = 15)
cowplot::plot_grid(V_cyano_inf_effect_control$plot,
V_cyano_inf_effect_met$plot,
V_cyano_met_effect_1org$plot,
V_cyano_met_effect_2orgs$plot,
labels = c("a", "b", "c", "d"), label_size = 20)
dev.off()
## Venn diagrams
# devtools::install_github("yanlinlin82/ggvenn")
library(ggvenn)
## Select differentially expressed genes in each comparison
getGenes <- function(x) {rownames(x[x$padj < 0.05 & !is.na(x$padj),])}
# Combine the lists into a named list for the Venn diagram
venn_data <- list("infection effect chytrid - control"=
getGenes(contrast_chytridgenome$resr_inf_effect_control),
"met effect chytrid - free living"=
getGenes(contrast_chytridgenome$resr_met_effect_1org),
"met effect chytrid - infecting"=
getGenes(contrast_chytridgenome$resr_met_effect_2orgs),
"infection effect chytrid - met"=
getGenes(contrast_chytridgenome$resr_inf_effect_met))
ggvenn(
venn_data, show_percentage = F, fill_color = rep("white", 4),
stroke_size = 0.5, set_name_size = 4
)
# Combine the lists into a named list for the Venn diagram
venn_data <- list("infection effect cyano - control"=
getGenes(contrast_cyanogenome$resr_inf_effect_control),
"met effect cyano - alone"=
getGenes(contrast_cyanogenome$resr_met_effect_1org),
"met effect cyano - infected"=
getGenes(contrast_cyanogenome$resr_met_effect_2orgs),
"infection effect cyano - met"=
getGenes(contrast_cyanogenome$resr_inf_effect_met))
ggvenn(
venn_data, show_percentage = F, fill_color = rep("white", 4),
stroke_size = 0.5, set_name_size = 4
)
?ggplot
?ggvenn
?ggplot
?EnhancedVolcano
citation("ggplot")
citation("ggplot2")
citation("ggvenn")
